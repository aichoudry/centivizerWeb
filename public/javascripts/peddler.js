// currently using the user ID for logging in, this will be replaced with face identification in the future
let USER_ID = "e579923b-6f72-4e98-b735-c9dc057074c5";
//for development uncomment
/*
let USER_ID = prompt("Enter UserID")
while (!USER_ID) {
    USER_ID = prompt("Enter UserID")
}
*/
var LTC = "GENERAL";


/* ********************************************
 below is the list of videos for the previous version
******************************************** */

//List of videos: video name, thumbnail image, video path, map coordinates
// let vid0 = { vname: "Gondola in Venice", image: "images/peddler/gondola.jpg", vid: "./videos/peddler/gondola.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 2.1, 6.1, -2.1, -6.1], [409.3, -107.5, 0, 0, 0, 8.8, 0, -8.8], [445.4, -130, 0, 0, -2.9, 5.8, 2.9, -5.8], [434, -157.5, 0, 0, 1.6, 8.5, -1.6, -8.5], [430.8, -172.5, 0, 0, 0, 0, 0, 0], [430, -189, 0, 0, 0, 0, 0, 0], [435, -263.7, 0, 0, 0, 10.9, 0, -10.9], [430, -285, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid1 = { vname: "French Alps", image: "images/peddler/frenchalps.jpg", vid: "./videos/peddler/alps.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [434, 84.3, 0, 0, 0, 0, 0, 0], [434.9, 83.2, 0, 0, -0.5, 0.7, 0.2, -0.3], [435.7, 82.2, 0, 0, -0.3, 0.4, 2.5, -3.1], [442.6, 73.6, 0, 0, 0, 0, 0, 0], [442.6, 61.6, 0, 0, 0, 0, 0, 0], [450.6, 51.6, 0, 0, -1.3, 7.3, 1.3, -7.3], [448.6, 40.2, 0, 0, 1.3, 6, -1.3, -6], [455.9, 26.9, 0, 0, 0, 0, 0, 0], [455.2, 10.9, 0, 0, 2.7, 5.3, -2.7, -5.3], [445.3, 2.8, 0, 0, 0.7, 7.3, -0.7, -7.3], [449.2, -7.9, 0, 0, -0.7, 8, 0.7, -8], [451.9, -58.4, 0, 0, 0, 10.6, 0, -10.6], [444.6, -73, 0, 0, 0, 6, 0, -6], [440.6, -91, 0, 0, 0, 6.6, 0, -6.6], [445.9, -102.4, 0, 0, 0, 0, 0, 0], [445.3, -126.3, 0, 0, -4, 7.3, 4, -7.3], [453.9, -136.4, 0, 0, 0, 5.3, 0, -5.3], [453.2, -151.7, 0, 0, 3.3, 5.3, -3.3, -5.3], [445.9, -158.4, 0, 0, 0, 0, 0, 0], [438.6, -170.4, 0, 0, 3.3, 7.3, -3.3, -7.3], [438.6, -190.4, 0, 0, 0, 0, 0, 0], [445.2, -205.8, 0, 0, 0, 0, 0, 0], [441.3, -219.8, 0, 0, 0, 0, 0, 0], [441.9, -230.5, 0, 0, 0, 0, 0, 0], [457.2, -250.4, 0, 0, -1.3, 10.6, 1.3, -10.6], [443.9, -277.7, 0, 0, 0, 0, 0, 0, "none"], [437.6, -286.4, 0, 0, 0, 0, 0, 0], [437.3, -293.1, 0, 0, 0, 0, 0, 0], [445.9, -299.7, 0, 0, 0, 0, 0, 0], [445, -313.3, 0, 0, -0.7, 1.9, 2.9, -8.3]] };
// let vid2 = { vname: "Central Park", image: "images/peddler/centralpark.jpg", vid: "./videos/peddler/centralpark.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [433.3, 83, 0, 0, -0.7, 6.6, 0.7, -6.6], [432.7, 67, 0, 0, 0, 0, 0, 0], [433, 46.4, 0, 0, 0, 0, 0, 0], [433.3, 33, 0, 0, 0, 0, 0, 0], [439, 19.7, 0, 0, 0, 0, 0, 0], [430, 3, 0, 0, 0, 0, 0, 0], [430, -13, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, 0, 0, 0, 0], [432, -45.7, 0, 0, 0, 0, 0, 0], [435.3, -61, 0, 0, 0, 0, 0, 0], [438.6, -87.6, 0, 0, -1.3, 10.6, 1.3, -10.6], [444.5, -153.7, 0, 0, 0, 0, 0, 0], [445.3, -173.7, 0, 0, 0, 0, 0, 0], [442.6, -251, 0, 0, 0, 0, 0, 0], [439.9, -268.3, 0, 0, 0, 0, 0, 0], [437.3, -285, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 2, 6, -2, -6], [417.4, -324.3, 0, 0, 0, 0, 0, 0], [420.7, -333, 0, 0, 0, 0, 0, 0]] };
// let vid3 = { vname: "Rocky Desert", image: "images/peddler/rockydesert.jpg", vid: "./videos/peddler/OrmaraMountain.mp4", points: [[436.6, 106.3, 0, 0, 0, 0, 0, 0], [433.3, 93.6, 0, 0, 0, 3.3, 0, -3.3], [435.3, 83.6, 0, 0, -2, 3.3, 2, -3.3], [440.6, 74.9, 0, 0, -2, -0.7, 2, 0.7], [443.9, 66.2, 0, 0, 2, 6.6, -2, -6.6], [442.6, 50.2, 0, 0, -1.3, 4, 1.3, -4], [448.5, 41.5, 0, 0, -0.7, 2, 0.7, -2], [451.8, 35.4, 0, 0, -0.7, 7.3, 0.7, -7.3], [446.6, 21.4, 0, 0, 0, 0, 0, 0], [438, 8, 0, 0, 0, 0, 0, 0], [436.6, -8.6, 0, 0, 3.3, 5.3, -3.3, -5.3], [429.6, -16.6, 0, 0, 1.3, 11.3, -1.3, -11.3], [440.4, -51.8, 0, 0, -0.1, 1.6, 0.2, -4.4], [439.9, -71.7, 0, 0, 0, 1, 0, -0.1], [443.3, -84.4, 0, 0, 0, 0, 0, 0], [451.9, -92.3, 0, 0, 0, 0, 0, 0], [457.1, -102.4, 0, 0, 0.7, 5.9, -0.7, -5.9], [453.9, -117.7, 0, 0, 0, 0, 0, 0], [444.6, -125.1, 0, 0, 0, 0, 0, 0], [440.6, -152.8, 0, 0, -3.3, 7.1, 3.3, -7.1], [451.9, -164.3, 0, 0, -2, 4, 2, -4], [452.5, -176.8, 0, 0, 0, 3.2, 0, -0.1], [452.5, -196.9, 0, 0, 0, 0, 0, 0], [457.2, -207.7, 0, 0, 0, 4, 0, -4], [452.5, -217.8, 0, 0, 0, 0, 0, 0], [450.6, -233.8, 0, 0, 0, 0, 0, 0], [451.2, -246.5, 0, 0, 0, 0, 0, 0], [457.9, -260.5, 0, 0, -9.3, 12.6, 9.3, -12.6], [503, -287.7, 0, 0, 0, 0, 0, 0], [516.1, -296.4, 0, 0, -2, 6.6, 2, -6.6], [516.8, -315.1, 0, 0, 0, 0, 0, 0]] };
// let vid4 = { vname: "Country Road", image: "images/peddler/countryroad.jpg", vid: "./videos/peddler/bike.mp4", points: [[392.9, 101.7, 0, 0, 0, 0, 0, 0], [398.2, 92.9, 0, 0, -2, 7.3, 2, -7.3], [398.2, 45.1, 0, 0, 0, 0, 0, 0], [406.8, 15.5, 0, 0, -5.3, 10.6, 5.3, -10.6], [413.4, -12.4, 0, 0, -4, 13.3, 4, -13.3], [427.3, -44.3, 0, 0, -2.7, 11.3, 2.7, -11.3], [430, -72.3, 0, 0, 0, 0, 0, 0], [430, -80.3, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0.7, 6, -0.7, -6], [422.7, -110.3, 0, 0, 0, 0, 0, 0], [419.4, -125, 0, 0, -1.3, 6.6, 1.3, -6.6], [430, -141, 0, 0, -2, 5.3, 2, -5.3], [431.3, -153.7, 0, 0, -1.3, 4, 1.3, -4], [438, -167.7, 0, 0, 0, 6, 0, -6], [432.7, -190.3, 0, 0, 0, 0, 0, 0], [430, -205, 0, 0, 0, 0, 0, 0], [430, -221, 0, 0, 0, 0, 0, 0], [431.3, -235, 0, 0, 1.3, 6, -1.3, -6], [425.4, -248.4, 0, 0, 2.7, 9.3, -2.7, -9.3], [425.4, -269, 0, 0, 0, 0, 0, 0], [424.7, -285.7, 0, 0, 0, 0, 0, 0], [425.4, -303, 0, 0, 0, 0, 0, 0], [422.7, -316.3, 0, 0, 0, 0, 0, 0], [412.8, -331, 0, 0, 0, 0, 0, 0]] };
// let vid5 = { vname: "Forest Trail", image: "images/peddler/forest.jpg", vid: "./videos/peddler/forest.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [435.3, 86.3, 0, 0, 0, 0, 0, 0], [436, 67.7, 0, 0, 1.3, 3.3, -1.3, -3.3], [430, 60.3, 0, 0, 0.7, 6.6, -0.7, -6.6], [434, 48.9, 0, 0, -1.4, 6, 1.4, -6], [434, 19, 0, 0, 0, 0, 0, 0], [434, 19, 0, 0, 0, 0, 0, 0], [436, 3, 0, 0, 0, 0, 0, 0], [434.6, -15, 0, 0, 0, 0, 0, 0], [432.7, -29, 0, 0, 0, 0, 0, 0], [434.6, -41, 0, 0, 0, 0, 0, 0], [437.3, -50.4, 0, 0, -1.3, 8.6, 1.3, -8.6], [434, -77, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0, 0, 0, 0], [430, -109, 0, 0, 0, 0, 0, 0], [432.7, -125, 0, 0, 0, 0, 0, 0], [430, -141, 0, 0, 0, 0, 0, 0], [425.4, -150.4, 0, 0, 0, 0, 0, 0], [425.4, -160.4, 0, 0, 0, 0, 0, 0], [429.3, -182.4, 0, 0, -0.7, 6.6, 0.7, -6.6], [425.4, -196.4, 0, 0, 0, 9.3, 0, -9.3], [428.7, -219.7, 0, 0, 0, 0, 0, 0], [430, -269, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, -1.3, 8, 1.3, -8], [434.6, -314.3, 0, 0, -4, 8.6, 4, -8.6], [433.3, -331.7, 0, 0, 0, 0, 0, 0]] };
// let vid6 = { vname: "Lakeshore County", image: "images/peddler/lakeshore.jpg", vid: "./videos/peddler/suburbandrive.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, 85, 0, 0, 0, 0, 0, 0], [440.5, 55.8, 0, 0, -0.7, 9.9, 0.7, -9.9], [432, 28.3, 0, 0, 0, 0, 0, 0], [431.3, -19.5, 0, 0, -3.3, 15.9, 3.3, -15.9], [449.2, -56.9, 0, 0, -1.3, 5.3, 1.3, -5.3], [447.2, -115.1, 0, 0, 0, 0, 0, 0], [443.3, -135.7, 0, 0, 4, 9.9, -4, -9.9], [432.7, -167.6, 0, 0, 2.7, 8.6, -2.7, -8.6], [438, -194.4, 0, 0, 0, 0, 0, 0], [436.6, -218.3, 0, 0, 0, 0, 0, 0], [440.6, -236.3, 0, 0, 0, 0, 0, 0], [437.3, -251, 0, 0, 0, 0, 0, 0], [436, -271, 0, 0, 0, 0, 0, 0], [435.3, -325.6, 0, 0, -0.7, 5.3, 0.7, -5.3], [441.9, -340.3, 0, 0, 0, 0, 0, 0]] };
// let vid7 = { vname: "Alpine Village", image: "images/peddler/alpinevillage.jpg", vid: "./videos/peddler/alpinevillage.mp4", points: [[439.9, 97.7, 0, 0, 0, 0, 0, 0], [436.6, 81, 0, 0, 0, 0, 0, 0], [431.3, 67.7, 0, 0, 0, 0, 0, 0], [430, 45.7, 0, 0, 0, 0, 0, 0], [422.7, 30.3, 0, 0, 0, 0, 0, 0], [422.7, 11, 0, 0, 0, 7.3, 0, -7.3], [427.3, -10.3, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, -2, 4.6, 2, -4.6], [437.3, -41.7, 0, 0, 0, 6.6, 0, -6.6], [434.6, -60.3, 0, 0, 0, 0, 0, 0], [430, -77, 0, 0, -0.7, 7.3, 0.7, -7.3], [434, -97.6, 0, 0, 0, 0, 0, 0], [431.3, -127, 0, 0, -2.7, 9.9, 0, 0], [431.3, -127, 0, 0, 0, 0, 2.7, -9.9], [442.7, -157.7, 0, 0, 1.3, 11.3, -1.3, -11.3], [430, -181.7, 0, 0, 3.3, 8.6, -3.3, -8.6], [430, -253, 0, 0, 1.3, 5.3, -1.3, -5.3], [426, -270.3, 0, 0, 0, 0, 0, 0], [427.3, -283.7, 0, 0, 0, 0, 0, 0], [438, -300.3, 0, 0, -1.3, 7.3, 1.3, -7.3], [430, -317, 0, 0, 0, 0, 0, 0], [425.4, -333, 0, 0, 0, 0, 0, 0]] };
// let vid8 = { vname: "Evergreen Trail", image: "images/peddler/evergreen.jpg", vid: "./videos/peddler/evergreen.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, 35, 0, 0, 2, 6.6, -2, -6.6], [424, 16.3, 0, 0, 0, 0, 0, 0], [422.7, -31, 0, 0, 1.3, 3.3, -1.3, -3.3], [414.7, -45, 0, 0, 0, 0, 0, 0], [410.8, -183.1, 0, 0, -2.7, 11.9, 2.7, -11.9], [426.7, -201.8, 0, 0, -3.3, 12.6, 3.3, -12.6], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid9 = { vname: "Bustling City", image: "images/peddler/bustlingcity.jpg", vid: "./videos/peddler/tokyo.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, 83, 0, 0, 0, 0, 0, 0], [430, 54, 0, 0, 0, 16.6, 0, -33.2], [430, -29, 0, 0, 0, 0, 0, 0], [442.6, -47, 0, 0, 0, 0, 0, 0], [444.6, -70.9, 0, 0, 0, 0, 0, 0], [430.7, -86.4, 0, 0, 0, 0, 0, 0], [430, -172.3, 0, 0, 0, 0, 0, 0], [439.9, -189, 0, 0, 0, 0, 0, 0], [440.6, -334.3, 0, 0, 0, 0, 0, 0]] };
// let vid10 = { vname: "Evening City", image: "images/peddler/eveningcity.jpg", vid: "./videos/peddler/soho.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, 0, 0, 0, 0], [441.3, -46.3, 0, 0, 0, 0, 0, 0], [442.6, -123.6, 0, 0, 0, 0, 0, 0], [430, -137.7, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid11 = { vname: "Winter Dogsled", image: "images/peddler/dogsledding.jpg", vid: "./videos/peddler/dogsledding.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, 67, 0, 0, 0, 0, 0, 0], [434.6, 49, 0, 0, 0, 0, 0, 0], [435.3, 33, 0, 0, 0, 0, 0, 0], [434.6, -13, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 0, 0, 0, 0], [430, -128.5, 0, 0, 0, 22.5, 0, -7.5], [430, -141, 0, 0, 0, 0, 0, 0], [435.3, -158.3, 0, 0, 0, 0, 0, 0], [447.2, -174.3, 0, 0, -2, 9.3, 2, -9.3], [448.6, -245.8, 0, 0, 0, 0, 0, 0], [443.9, -259.8, 0, 0, 0, 0, 0, 0], [445.9, -299.7, 0, 0, 0, 0, 0, 0], [443.9, -318.3, 0, 0, 0, 0, 0, 0], [443.9, -333, 0, 0, 0, 0, 0, 0]] };
// let vid12 = { vname: "Eiffel Tower", image: "images/peddler/eiffeltower.jpg", vid: "./videos/peddler/eiffeltower.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [434.6, 85, 0, 0, 0, 0, 0, 0], [430.7, 70.3, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, 0, 0, 0, 0], [433.3, -46.3, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid13 = { vname: "Outside the Louvre", image: "images/peddler/louvre.jpg", vid: "./videos/peddler/louvre.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, 19, 0, 0, 0, 0, 0, 0], [410.7, -13, 0, 0, 0, 0, 0, 0], [410.8, -124.4, 0, 0, 0, 0, 0, 0], [430.7, -194.4, 0, 0, 0, 0, 0, 0], [418.1, -213.7, 0, 0, 0, 0, 0, 0], [416.7, -279, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid14 = { vname: "Beach Walk", image: "images/peddler/beachwalk.jpg", vid: "./videos/peddler/venicebeach.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [428.7, -22.4, 0, 0, 0, 0, 0, 0], [433.4, -35.1, 0, 0, 0, 0, 0, 0], [434.6, -80.3, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid15 = { vname: "Egyptian Pyramids", image: "images/peddler/pyramids.jpg", vid: "./videos/peddler/pyramids.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430.8, 79, 0, 0, 0, 0, 0, 0], [430, 51, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid16 = { vname: "Majestic Mountains", image: "images/peddler/newzealand.jpg", vid: "./videos/peddler/newzealand.mp4", points: [[443.9, 105.6, 0, 0, 0, 0, 0, 0], [430, 76.3, 0, 0, 2, 11.3, -0.1, -0.3], [429.8, 75.2, 0, 0, 0, 0.4, -1.8, -15.3], [429.3, -30.4, 0, 0, 0, 0, 0, 0], [428.7, -52.5, 0, 0, 2, 9.9, -2, -9.9], [422, -73.9, 0, 0, 2, 8, -2, -8], [422.7, -139.1, 0, 0, 0, 0, 0, 0], [422.7, -155.3, 0, 0, 2, 6.6, -2, -6.6], [418.8, -167.2, 0, 0, 0, 0, 0, 0], [420.7, -233.1, 0, 0, 0, 0, 0, 0], [429.3, -249.2, 0, 0, -5.3, 8.6, 5.3, -8.6], [439.9, -262.5, 0, 0, -2.7, 9.3, 2.7, -9.3], [439.3, -330.3, 0, 0, 0, 0, 0, 0]] };
// let vid17 = { vname: "Italian Riviera", image: "images/peddler/italiancoast.jpg", vid: "./videos/peddler/italiancoast.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [436.6, 84.9, 0, 0, 0, 0, 0, 0], [441.4, 55.6, 0, 0, 0, 7.7, 0, -7.7], [432.7, 18.7, 0, 0, 0, 0, 0, 0], [430, 3, 0, 0, 0, 0, 0, 0], [430, -109, 0, 0, 0, 0, 0, 0], [433.7, -121.6, 0, 0, 0, 0, 0, 0], [435, -172.6, 0, 0, 0, 0, 0, 0], [430.5, -196.8, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, -2.1, 11.9, 2.1, -11.9], [436.4, -331.9, 0, 0, 0, 0, 0, 0]] };
// let vid18 = { vname: "Hawaiian Resort", image: "images/peddler/hawaii.jpg", vid: "./videos/peddler/hawaii.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [429.5, 92.5, 0, 0, 0, 0, 0, 0], [441.6, 71.2, 0, 0, 0, 4.2, 0, -4.2], [438.2, 59.4, 0, 0, 0, 0, 0, 0], [443, 37, 0, 0, 0.5, 4, -0.5, -4], [435.8, 16.8, 0, 0, 0, 0, 0, 0], [438.8, -13, 0, 0, 0, 0, 0, 0], [433.4, -27.2, 0, 0, 0, 0, 0, 0], [438, -50.7, 0, 0, 0, 0, 0, 0], [431.9, -69, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0, 0, 0, 0], [421, -129.5, 0, 0, 6.4, 9.3, -6.4, -9.3], [412.2, -140.2, 0, 0, 0, 0, 0, 0], [411.5, -184.6, 0, 0, -4.2, 14.1, 4.2, -14.1], [432.1, -212.2, 0, 0, -1.6, 12.2, 1.6, -12.2], [427.3, -226.1, 0, 0, 0, 0, 0, 0], [423.9, -250.6, 0, 0, -2.4, 9.5, 2.4, -9.5], [441.9, -269.6, 0, 0, -0.8, 16.4, 0.8, -16.4], [454.4, -292, 0, 0, 0.3, 11.1, -0.3, -11.1], [443.8, -300.6, 0, 0, 1.9, 8, -1.9, -8], [450.7, -327.2, 0, 0, 4, 10.3, -4, -10.3]] };
// let vid19 = { vname: "Cherry Blossoms", image: "images/peddler/cherryblossoms.jpg", vid: "./videos/peddler/cherryblossoms.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [428.9, -43.7, 0, 0, 0, 10.3, 0, -10.3], [434.4, -136.1, 0, 0, 3.2, 24.1, -3.2, -24.1], [414.6, -193, 0, 0, 2.4, 10.6, -2.4, -10.6], [415.1, -333, 0, 0, 0, 0, 0, 0]] };
// let vid20 = { vname: "Big Ben", image: "images/peddler/bigben.jpg", vid: "./videos/peddler/bigben.mp4", points: [[456.3, 96.3, 0, 0, 0, 0, 0, 0], [430, 83, 0, 0, 0, 0, 0, 0], [429.5, -57.6, 0, 0, 0, 0, 0, 0], [441.9, -68.8, 0, 0, -0.8, -18.6, 0.8, 18.6], [429.7, -81.1, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid21 = { vname: "Bike Race", image: "images/peddler/bikerace.jpg", vid: "./videos/peddler/bikerace.mp4", points: [[437.4, 99.3, 0, 0, 0, 0, 0, 0], [431.1, 77.8, 0, 0, 0.8, 8.5, -0.8, -8.5], [441.1, 61.4, 0, 0, 0, 10.1, 0, -10.1], [440.6, -57.2, 0, 0, 0, 0, 0, 0], [444.3, -64.4, 0, 0, 0, 0, 0, 0], [447, -92.6, 0, 0, -2.9, 9.5, 2.9, -9.5], [459.7, -112.6, 0, 0, 0, 0, 0, 0], [465.8, -127.4, 0, 0, 0.5, 10.6, -0.5, -10.6], [459.7, -138.6, 0, 0, 0, 0, -4.5, -12.7], [453.9, -188.3, 0, 0, -0.3, 18.6, 0.3, -18.6], [463.1, -203.4, 0, 0, -1.9, 7.7, 1.9, -7.7], [467.6, -211.3, 0, 0, -4.2, 0.3, 4.2, -0.3, "straight"], [467.6, -343.1, 0, 0, 0, 0, 0, 0]] };
// let vid22 = { vname: "Spanish Beach", image: "images/peddler/barcebeach.jpg", vid: "./videos/peddler/barcebeach.mp4", points: [[424.4, 101.9, 0, 0, 0, 0, 0, 0], [430, 67, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid23 = { vname: "Rainforest Walk", image: "images/peddler/hawaiiforest.jpg", vid: "./videos/peddler/hawaiiforest.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [434.8, 83, 0, 0, 1.3, 4.2, -1.3, -4.2], [429.2, 66.7, 0, 0, 0, 2.7, 0, -2.7], [432.4, 56.8, 0, 0, 0, 0, 0, 0], [436.4, 20.3, 0, 0, 0.8, 5.3, -0.8, -5.3], [427.1, -10.3, 0, 0, 0, 1.9, 0, -1.9], [427.3, -19.2, 0, 0, 2.7, 4, -2.7, -4], [418.1, -27.5, 0, 0, 0.5, 3.4, -0.5, -3.4], [426.6, -44.8, 0, 0, 0, 0, 0, 0], [430.3, -66.7, 0, 0, 0, 0, 0, 0], [426.8, -90.9, 0, 0, 0, 3.2, 0, -3.2], [431.9, -109.8, 0, 0, 0, 4.8, 0, -4.8], [426.6, -124.5, 0, 0, 0, 4.5, 0, -4.5], [431.6, -140.7, 0, 0, 0, 5.3, 0, -5.3], [426.8, -157, 0, 0, 0, 0, 0, 0], [430, -173, 0, 0, 0, 0, 0, 0], [430, -269, 0, 0, 0, 0, 0, 0], [434.3, -289.5, 0, 0, -0.5, 5.8, 0.5, -5.8], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid24 = { vname: "Cloudy Marsh", image: "images/peddler/hawaiimarsh.jpg", vid: "./videos/peddler/hawaiimarsh.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, -61, 0, 0, 0, 0, 0, 0], [430, -61, 0, 0, 0, 0, 0, 0], [435, -116.9, 0, 0, -6.9, 18.8, 6.9, -18.8], [460.2, -159.2, 0, 0, -3.4, 9.8, 3.4, -9.8], [466.6, -246.5, 0, 0, 0, 0, 0, 0], [466.6, -305.3, 0, 0, 2.9, 13.5, -2.9, -13.5], [453.1, -325.6, 0, 0, 0, 0, 0, 0]] };
// let vid25 = { vname: "Hollywood Boulevard", image: "images/peddler/hollywood.jpg", vid: "./videos/peddler/hollywood.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid26 = { vname: "Sunset City", image: "images/peddler/londonsunset.jpg", vid: "./videos/peddler/londonsunset.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, -141, 0, 0, 0, 0, 0, 0], [425.2, -171.7, 0, 0, 0, 11.1, 0, -11.1], [430, -191.4, 0, 0, -0.5, 5.3, 0.5, -5.3], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid27 = { vname: "City Lakeshore", image: "images/peddler/waterfrontdrive.jpg", vid: "./videos/peddler/waterfrontdrive.mp4", points: [[437.2, 99.8, 0, 0, 0, 0, 0, 0], [430, 67, 0, 0, 0.3, 9, -0.3, -9], [433.7, 48.5, 0, 0, -0.5, 3.7, 0.5, -3.7], [429.2, 7.5, 0, 0, 0.3, 12.2, -0.3, -12.2], [430, -13, 0, 0, 0, 0, 0, 0], [429.2, -44.5, 0, 0, 0, 0, 0, 0], [428.9, -135.7, 0, 0, 0, 7.7, 0, -7.7], [426.8, -148.8, 0, 0, 0, 0, 0, 0], [430, -173, 0, 0, 0, 0, 0, 0], [430, -205, 0, 0, 0, 0, 0, 0], [434.2, -235.1, 0, 0, 0, 6.6, 0, -6.6], [430, -253.3, 0, 0, 0.8, 6.9, -0.8, -6.9], [430, -301, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, 1.9, 9.5, -1.9, -9.5], [417.8, -330.1, 0, 0, 0, 0, 0, 0]] };
// let vid28 = { vname: "Parisian Boutiques", image: "images/peddler/paris.jpg", vid: "./videos/peddler/paris.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430.8, 79, 0, 0, 0, 0, 0, 0], [430, 51, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid29 = { vname: "Sports Stadium", image: "images/peddler/rogerscentre.jpg", vid: "./videos/peddler/rogerscentre.mp4", points: [[465, 98.7, 0, 0, 0, 0, 0, 0], [447, 62.5, 0, 0, 0, 0, 0, 0], [439.5, 26.4, 0, 0, 0, 0, 0, 0], [438.3, 4.6, 0, 0, 0.8, 13.2, -1.3, -22.9], [433.1, -86.1, 0, 0, 1.8, 30.9, -1.3, -22.2], [433.5, -314.4, 0, 0, 0.5, 8.6, -0.2, -3.1], [427.6, -330.6, 0, 0, 0, 0, 0, 0]] };
// let vid30 = { vname: "Snowy Forest", image: "images/peddler/snowforest.jpg", vid: "./videos/peddler/snowforest.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [431.6, 3.8, 0, 0, 0, 0, 0, 0], [430, -13, 0, 0, 0, 0, 0, 0], [430, -157, 0, 0, -1.1, 6.6, 1.1, -6.6], [436.6, -171.4, 0, 0, 0, 0, 0, 0], [445.1, -204.5, 0, 0, -0.8, 7.4, 0.8, -7.4], [440.9, -222.6, 0, 0, 0, 0, 0, 0], [430.8, -249, 0, 0, 1.3, 4.5, -1.3, -4.5], [433.6, -310.1, 0, 0, 0.2, 23.6, -0.1, -7.9], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid31 = { vname: "Tokyo at Night", image: "images/peddler/tokyonight.jpg", vid: "./videos/peddler/tokyonight.mp4", points: [[441.9, 97.4, 0, 0, 0, 0, 0, 0], [422.3, -37.7, 0, 0, 0, 8, 0, -8], [430, -61, 0, 0, 0, 0, 0, 0], [435.8, -117.6, 0, 0, 0, 0, 0, 0], [429.2, -131.7, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [434, -317.8, 0, 0, -4.8, 5.3, 4.8, -5.3], [447.8, -327.2, 0, 0, 0, 0, 0, 0]] };
// let vid32 = { vname: "Toronto Waterfront", image: "images/peddler/torharbourfront.jpg", vid: "./videos/peddler/torharbourfront.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [449.4, -249.2, 0, 0, 0, 0, 0, 0], [434.2, -271.3, 0, 0, 0, 0, 0, 0], [432.7, -333, 0, 0, 0, 0, 0, 0]] };
// let vid33 = { vname: "Las Vegas Tour", image: "images/peddler/vegasstrip.jpg", vid: "./videos/peddler/vegasstrip.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [434.2, 83, 0, 0, 0, 0, 0, 0], [430, 51, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid34 = { vname: "Rocky Prairie", image: "images/peddler/rockypark.jpg", vid: "./videos/peddler/rockypark.mp4", points: [[448.6, 105.9, 0, 0, 0, 0, 0, 0], [433.2, 88.1, 0, 0, 3.4, 9.3, -3.4, -9.3], [436.9, 62.9, 0, 0, 0.3, 8.5, -0.3, -8.5], [425, 21.4, 0, 0, 0.8, 18, -0.8, -18], [431.3, -10.1, 0, 0, -2.4, 7.4, 2.4, -7.4], [430, -29, 0, 0, 0, 0, 0, 0], [422.1, -51.6, 0, 0, 0, 8.5, 0, -8.5], [429.5, -82.1, 0, 0, 0, 0, 0, 0], [430, -109, 0, 0, 0, 0, 0, 0], [435.3, -123.9, 0, 0, 0, 7.7, 0, -7.7], [428.1, -141.3, 0, 0, -0.5, 5.6, 0.5, -5.6], [440.3, -174.8, 0, 0, -0.5, 12.7, 0.5, -12.7], [430, -205, 0, 0, -0.3, 10.9, 0.3, -10.9], [430, -237, 0, 0, 0, 0, 0, 0], [426.3, -266.3, 0, 0, 5.8, 10.9, -5.8, -10.9], [430, -294.9, 0, 0, -1.3, 4.2, 1.3, -4.2], [430, -317, 0, 0, 0, 0, 0, 0], [421, -332.2, 0, 0, 0, 0, 0, 0]] };
// let vid35 = { vname: "Cactus Trail", image: "images/peddler/arizonaroad.jpg", vid: "./videos/peddler/arizonaroad.mp4", points: [[419.2, 100.6, 0, 0, 0, 0, 0, 0], [430, 34.2, 0, 0, -0.3, 23.3, 0.3, -23.3], [430.8, -185.6, 0, 0, 0.8, 9.5, -0.8, -9.5], [422.6, -238.8, 0, 0, 3.7, 10.9, -3.7, -10.9], [404, -280, 0, 0, 3.2, 10.1, -3.2, -10.1], [401.6, -328.2, 0, 0, 4.5, 10.1, -4.5, -10.1]] };
// let vid36 = { vname: "Cliffside Cacti", image: "images/peddler/arizonatrail.jpg", vid: "./videos/peddler/arizonatrail.mp4", points: [[439.3, 99, 0, 0, 0, 0, 0, 0], [430, 83, 0, 0, 1.6, 11.4, -1.6, -11.4], [430.3, 65.6, 0, 0, 0, 0, 0, 0], [431.1, 35, 0, 0, 0.5, 2.4, -0.5, -2.4], [425.2, 19, 0, 0, 0, 2.1, 0, -2.1], [437.2, -12.5, 0, 0, -3.7, 10.1, 3.7, -10.1], [430.5, -22.9, 0, 0, 2.7, 1.9, -2.7, -1.9], [427.6, -45.8, 0, 0, 0, 0, 0, 0], [432.1, -61.1, 0, 0, 0, 0, 0, 0], [438, -73.9, 0, 0, 2.1, 3.2, -2.1, -3.2], [426.6, -75.3, 0, 0, 3.2, 2.1, -3.2, -2.1], [430, -125, 0, 0, 0.5, 7.4, -0.5, -7.4], [427.1, -141, 0, 0, 0, 0, 0, 0], [427.3, -171.4, 0, 0, 0, 0, 0, 0], [432.1, -205, 0, 0, 0, 0, 0, 0], [430, -221, 0, 0, 0, 0, 0, 0], [430.8, -253.3, 0, 0, 0, 0, 0, 0], [428.4, -269, 0, 0, 0, 0, 0, 0], [430.5, -282.3, 0, 0, 0, 0, 0, 0], [431.6, -317.5, 0, 0, 0, 0, 0, 0], [438.2, -328, 0, 0, 0, 0, 0, 0]] };
// let vid37 = { vname: "Sunny City", image: "images/peddler/busan.jpg", vid: "./videos/peddler/hollywood.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [439, 87.8, 0, 0, 0, 4.5, 0, -4.5], [423.6, 77.6, 0, 0, 0.3, 2.9, -0.3, -2.9], [430, 51, 0, 0, 0.5, 7.7, -0.5, -7.7], [430, -13, 0, 0, 0, 0, 0, 0], [433.4, -24.8, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 0, 0, 0, 0], [430, -77, 0, 0, 0, 0, 0, 0], [432.7, -93, 0, 0, 0, 0, 0, 0], [430, -125, 0, 0, 0, 0, 0, 0], [430, -125, 0, 0, 0, 0, 0, 0], [430, -141, 0, 0, 0, 0, 0, 0], [422, -153, 0, 0, 0.5, 2.9, -0.5, -2.9], [430, -205, 0, 0, -0.5, 12.5, 0.5, -12.5], [430, -269, 0, 0, 2.7, 8, -2.7, -8], [418.1, -282.9, 0, 0, 2.1, 11.4, -2.1, -11.4], [430, -333, 0, 0, 0.5, 10.9, -0.5, -10.9]] };
// let vid38 = { vname: "City River", image: "images/peddler/palacemoat.jpg", vid: "./videos/peddler/palacemoat.mp4", points: [[405.8, 98.7, 0, 0, 0, 0, 0, 0], [417, 65.7, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0.8, 15.9, -0.8, -15.9], [428.4, -140.5, 0, 0, 0, 0, 0, 0], [434, -156.7, 0, 0, 0, 0, 0, 0], [428.7, -205, 0, 0, 0, 0, 0, 0], [432.4, -235.1, 0, 0, 0, 7.2, 0, -7.2], [435.5, -268.7, 0, 0, 0.8, 9.3, -0.8, -9.3], [435.8, -300.7, 0, 0, -1.1, 10.6, 1.1, -10.6], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid39 = { vname: "Rocky Canyon", image: "images/peddler/brycecanyon.jpg", vid: "./videos/peddler/brycecanyon.mp4", points: [[426.6, 99, 0, 0, 0, 0, 0, 0], [439, 80.9, 0, 0, 0.5, 4.8, -0.5, -4.8], [425.2, 67, 0, 0, -0.8, 4.8, 0.8, -4.8], [449.1, 50.7, 0, 0, 0.3, 2.9, -0.3, -2.9], [408.2, 36.9, 0, 0, 0.3, 2.4, -0.3, -2.4], [426.8, 24.8, 0, 0, -2.7, 2.7, 2.7, -2.7], [433.7, 1.6, 0, 0, 0, 3.4, 0, -3.4], [426.3, -8.3, 0, 0, 4.5, 8, -4.5, -8], [430, -61, 0, 0, -1.6, 6.1, 1.6, -6.1], [440.3, -70.1, 0, 0, -0.3, 6.4, 0.3, -6.4], [430, -83.2, 0, 0, 0, 0, 0, 0], [426.6, -124.7, 0, 0, 0, 4.5, 0, -4.5], [432.7, -141.8, 0, 0, 0, 3.2, 0, -3.2], [426.3, -172.2, 0, 0, 0, 2.1, 0, -2.1], [430, -189, 0, 0, 0, 0, 0, 0], [430, -221.5, 0, 0, -2.9, 6.9, 2.9, -6.9], [438.5, -235, 0, 0, -0.3, 4, 0.3, -4], [430, -269, 0, 0, 0, 4, 0, -4], [432.7, -285.8, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
//let vid39 = { vname: "Squidward Dabs", image: "images/peddler/squidwarddabs.jpg", vid: "./videos/peddler/squidward_hits_a_dab.mp4", points: [[437.4, 99.3, 0, 0, 0, 0, 0, 0], [431.1, 77.8, 0, 0, 0.8, 8.5, -0.8, -8.5], [441.1, 61.4, 0, 0, 0, 10.1, 0, -10.1], [440.6, -57.2, 0, 0, 0, 0, 0, 0], [444.3, -64.4, 0, 0, 0, 0, 0, 0], [447, -92.6, 0, 0, -2.9, 9.5, 2.9, -9.5], [459.7, -112.6, 0, 0, 0, 0, 0, 0], [465.8, -127.4, 0, 0, 0.5, 10.6, -0.5, -10.6], [459.7, -138.6, 0, 0, 0, 0, -4.5, -12.7], [453.9, -188.3, 0, 0, -0.3, 18.6, 0.3, -18.6], [463.1, -203.4, 0, 0, -1.9, 7.7, 1.9, -7.7], [467.6, -211.3, 0, 0, -4.2, 0.3, 4.2, -0.3, "straight"], [467.6, -343.1, 0, 0, 0, 0, 0, 0]] };


// list of select videos with progress map oriented horizontally
// let vid0 = { vname: "Gondola in Venice", image: "images/peddler/gondola.jpg", vid: "./videos/peddler/gondola.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [574, 99, 0, 0, 2.1, 6.1, -2.1, -6.1], [636.5, 78.3, 0, 0, 0, 8.8, 0, -8.8], [659.0, 114.4, 0, 0, -2.9, 5.8, 2.9, -5.8], [686.5, 103.0, 0, 0, 1.6, 8.5, -1.6, -8.5], [701.5, 99.8, 0, 0, 0, 0, 0, 0], [718.0, 99.0, 0, 0, 0, 0, 0, 0], [792.7, 104.0, 0, 0, 0, 10.9, 0, -10.9], [814.0, 99.0, 0, 0, 0, 0, 0, 0], [830.0, 99.0, 0, 0, 0, 0, 0, 0], [846.0, 99.0, 0, 0, 0, 0, 0, 0], [862.0, 99.0, 0, 0, 0, 0, 0, 0]] };
// let vid3 = { vname: "Rocky Desert", image: "images/peddler/rockydesert.jpg", vid: "./videos/peddler/OrmaraMountain.mp4", points: [[436.6, 106.3, 0, 0, 0, 0, 0, 0], [449.3, 103.0, 0, 0, 0, 3.3, 0, -3.3], [459.3, 105.0, 0, 0, -2, 3.3, 2, -3.3], [468.0, 110.3, 0, 0, -2, -0.7, 2, 0.7], [476.7, 113.6, 0, 0, 2, 6.6, -2, -6.6], [492.7, 112.3, 0, 0, -1.3, 4, 1.3, -4], [501.4, 118.2, 0, 0, -0.7, 2, 0.7, -2], [507.5, 121.5, 0, 0, -0.7, 7.3, 0.7, -7.3], [521.5, 116.3, 0, 0, 0, 0, 0, 0], [534.9, 107.7, 0, 0, 0, 0, 0, 0], [551.5, 106.3, 0, 0, 3.3, 5.3, -3.3, -5.3], [559.5, 99.3, 0, 0, 1.3, 11.3, -1.3, -11.3], [594.7, 110.1, 0, 0, -0.1, 1.6, 0.2, -4.4], [614.6, 109.6, 0, 0, 0, 1, 0, -0.1], [627.3, 113.0, 0, 0, 0, 0, 0, 0], [635.2, 121.6, 0, 0, 0, 0, 0, 0], [645.3, 126.8, 0, 0, 0.7, 5.9, -0.7, -5.9], [660.6, 123.6, 0, 0, 0, 0, 0, 0], [668.0, 114.3, 0, 0, 0, 0, 0, 0], [695.7, 110.3, 0, 0, -3.3, 7.1, 3.3, -7.1], [707.2, 121.6, 0, 0, -2, 4, 2, -4], [719.7, 122.2, 0, 0, 0, 3.2, 0, -0.1], [739.8, 122.2, 0, 0, 0, 0, 0, 0], [750.6, 126.9, 0, 0, 0, 4, 0, -4], [760.7, 122.2, 0, 0, 0, 0, 0, 0], [776.7, 120.3, 0, 0, 0, 0, 0, 0], [789.4, 120.9, 0, 0, 0, 0, 0, 0], [803.4, 127.6, 0, 0, -9.3, 12.6, 9.3, -12.6], [830.6, 172.7, 0, 0, 0, 0, 0, 0], [839.3, 185.8, 0, 0, -2, 6.6, 2, -6.6], [858.0, 186.5, 0, 0, 0, 0, 0, 0]] };
// let vid4 = { vname: "Country Road", image: "images/peddler/countryroad.jpg", vid: "./videos/peddler/bike.mp4", points: [[392.9, 101.7, 0, 0, 0, 0, 0, 0], [401.7, 107.0, 0, 0, -2, 7.3, 2, -7.3], [449.5, 107.0, 0, 0, 0, 0, 0, 0], [479.1, 115.6, 0, 0, -5.3, 10.6, 5.3, -10.6], [507.0, 122.2, 0, 0, -4, 13.3, 4, -13.3], [538.9, 136.1, 0, 0, -2.7, 11.3, 2.7, -11.3], [566.9, 138.8, 0, 0, 0, 0, 0, 0], [574.9, 138.8, 0, 0, 0, 0, 0, 0], [587.6, 138.8, 0, 0, 0.7, 6, -0.7, -6], [604.9, 131.5, 0, 0, 0, 0, 0, 0], [619.6, 128.2, 0, 0, -1.3, 6.6, 1.3, -6.6], [635.6, 138.8, 0, 0, -2, 5.3, 2, -5.3], [648.3, 140.1, 0, 0, -1.3, 4, 1.3, -4], [662.3, 146.8, 0, 0, 0, 6, 0, -6], [684.9, 141.5, 0, 0, 0, 0, 0, 0], [699.6, 138.8, 0, 0, 0, 0, 0, 0], [715.6, 138.8, 0, 0, 0, 0, 0, 0], [729.6, 140.1, 0, 0, 1.3, 6, -1.3, -6], [743.0, 134.2, 0, 0, 2.7, 9.3, -2.7, -9.3], [763.6, 134.2, 0, 0, 0, 0, 0, 0], [780.3, 133.5, 0, 0, 0, 0, 0, 0], [797.6, 134.2, 0, 0, 0, 0, 0, 0], [810.9, 131.5, 0, 0, 0, 0, 0, 0], [825.6, 121.6, 0, 0, 0, 0, 0, 0]] };
// let vid6 = { vname: "Lakeshore County", image: "images/peddler/lakeshore.jpg", vid: "./videos/peddler/suburbandrive.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [444, 99, 0, 0, 0, 0, 0, 0], [473.2, 109.5, 0, 0, -0.7, 9.9, 0.7, -9.9], [500.7, 101.0, 0, 0, 0, 0, 0, 0], [548.5, 100.3, 0, 0, -3.3, 15.9, 3.3, -15.9], [585.9, 118.2, 0, 0, -1.3, 5.3, 1.3, -5.3], [644.1, 116.2, 0, 0, 0, 0, 0, 0], [664.7, 112.3, 0, 0, 4, 9.9, -4, -9.9], [696.6, 101.7, 0, 0, 2.7, 8.6, -2.7, -8.6], [723.4, 107.0, 0, 0, 0, 0, 0, 0], [747.3, 105.6, 0, 0, 0, 0, 0, 0], [765.3, 109.6, 0, 0, 0, 0, 0, 0], [780.0, 106.3, 0, 0, 0, 0, 0, 0], [800.0, 105.0, 0, 0, 0, 0, 0, 0], [854.6, 104.3, 0, 0, -0.7, 5.3, 0.7, -5.3], [869.3, 110.9, 0, 0, 0, 0, 0, 0]] };
// let vid34 = { vname: "Rocky Prairie", image: "images/peddler/rockypark.jpg", vid: "./videos/peddler/rockypark.mp4", points: [[448.6, 105.9, 0, 0, 0, 0, 0, 0], [466.4, 90.5, 0, 0, 3.4, 9.3, -3.4, -9.3], [491.6, 94.2, 0, 0, 0.3, 8.5, -0.3, -8.5], [533.1, 82.3, 0, 0, 0.8, 18, -0.8, -18], [564.6, 88.6, 0, 0, -2.4, 7.4, 2.4, -7.4], [583.5, 87.3, 0, 0, 0, 0, 0, 0], [606.1, 79.4, 0, 0, 0, 8.5, 0, -8.5], [636.6, 86.8, 0, 0, 0, 0, 0, 0], [663.5, 87.3, 0, 0, 0, 0, 0, 0], [678.4, 92.6, 0, 0, 0, 7.7, 0, -7.7], [695.8, 85.4, 0, 0, -0.5, 5.6, 0.5, -5.6], [729.3, 97.6, 0, 0, -0.5, 12.7, 0.5, -12.7], [759.5, 87.3, 0, 0, -0.3, 10.9, 0.3, -10.9], [791.5, 87.3, 0, 0, 0, 0, 0, 0], [820.8, 83.6, 0, 0, 5.8, 10.9, -5.8, -10.9], [849.4, 87.3, 0, 0, -1.3, 4.2, 1.3, -4.2], [871.5, 87.3, 0, 0, 0, 0, 0, 0], [886.7, 78.3, 0, 0, 0, 0, 0, 0]] };

// let vid0 = { vname: "Gondola in Venice", image: "images/peddler/gondola.jpg", vid: "./videos/peddler/gondola.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 2.1, 6.1, -2.1, -6.1], [430, -107.5, 0, 0, 0, 8.8, 0, -8.8], [430, -130, 0, 0, -2.9, 5.8, 2.9, -5.8], [430, -157.5, 0, 0, 1.6, 8.5, -1.6, -8.5], [430, -172.5, 0, 0, 0, 0, 0, 0], [430, -189, 0, 0, 0, 0, 0, 0], [430, -263.7, 0, 0, 0, 10.9, 0, -10.9], [430, -285, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]] };
// let vid3 = { vname: "Rocky Desert", image: "images/peddler/rockydesert.jpg", vid: "./videos/peddler/OrmaraMountain.mp4", points: [[436.6, 106.3, 0, 0, 0, 0, 0, 0], [436.6, 93.6, 0, 0, 0, 3.3, 0, -3.3], [436.6, 83.6, 0, 0, -2, 3.3, 2, -3.3], [436.6, 74.9, 0, 0, -2, -0.7, 2, 0.7], [436.6, 66.2, 0, 0, 2, 6.6, -2, -6.6], [436.6, 50.2, 0, 0, -1.3, 4, 1.3, -4], [436.6, 41.5, 0, 0, -0.7, 2, 0.7, -2], [436.6, 35.4, 0, 0, -0.7, 7.3, 0.7, -7.3], [436.6, 21.4, 0, 0, 0, 0, 0, 0], [436.6, 8, 0, 0, 0, 0, 0, 0], [436.6, -8.6, 0, 0, 3.3, 5.3, -3.3, -5.3], [436.6, -16.6, 0, 0, 1.3, 11.3, -1.3, -11.3], [436.6, -51.8, 0, 0, -0.1, 1.6, 0.2, -4.4], [436.6, -71.7, 0, 0, 0, 1, 0, -0.1], [436.6, -84.4, 0, 0, 0, 0, 0, 0], [436.6, -92.3, 0, 0, 0, 0, 0, 0], [436.6, -102.4, 0, 0, 0.7, 5.9, -0.7, -5.9], [436.6, -117.7, 0, 0, 0, 0, 0, 0], [436.6, -125.1, 0, 0, 0, 0, 0, 0], [436.6, -152.8, 0, 0, -3.3, 7.1, 3.3, -7.1], [436.6, -164.3, 0, 0, -2, 4, 2, -4], [436.6, -176.8, 0, 0, 0, 3.2, 0, -0.1], [436.6, -196.9, 0, 0, 0, 0, 0, 0], [436.6, -207.7, 0, 0, 0, 4, 0, -4], [436.6, -217.8, 0, 0, 0, 0, 0, 0], [436.6, -233.8, 0, 0, 0, 0, 0, 0], [436.6, -246.5, 0, 0, 0, 0, 0, 0], [436.6, -260.5, 0, 0, -9.3, 12.6, 9.3, -12.6], [436.6, -287.7, 0, 0, 0, 0, 0, 0], [436.6, -296.4, 0, 0, -2, 6.6, 2, -6.6], [436.6, -315.1, 0, 0, 0, 0, 0, 0]] };
// let vid4 = { vname: "Country Road", image: "images/peddler/countryroad.jpg", vid: "./videos/peddler/bike.mp4", points: [[392.9, 101.7, 0, 0, 0, 0, 0, 0], [392.9, 92.9, 0, 0, -2, 7.3, 2, -7.3], [392.9, 45.1, 0, 0, 0, 0, 0, 0], [392.9, 15.5, 0, 0, -5.3, 10.6, 5.3, -10.6], [392.9, -12.4, 0, 0, -4, 13.3, 4, -13.3], [392.9, -44.3, 0, 0, -2.7, 11.3, 2.7, -11.3], [392.9, -72.3, 0, 0, 0, 0, 0, 0], [392.9, -80.3, 0, 0, 0, 0, 0, 0], [392.9, -93, 0, 0, 0.7, 6, -0.7, -6], [392.9, -110.3, 0, 0, 0, 0, 0, 0], [392.9, -125, 0, 0, -1.3, 6.6, 1.3, -6.6], [392.9, -141, 0, 0, -2, 5.3, 2, -5.3], [392.9, -153.7, 0, 0, -1.3, 4, 1.3, -4], [392.9, -167.7, 0, 0, 0, 6, 0, -6], [392.9, -190.3, 0, 0, 0, 0, 0, 0], [392.9, -205, 0, 0, 0, 0, 0, 0], [392.9, -221, 0, 0, 0, 0, 0, 0], [392.9, -235, 0, 0, 1.3, 6, -1.3, -6], [392.9, -248.4, 0, 0, 2.7, 9.3, -2.7, -9.3], [392.9, -269, 0, 0, 0, 0, 0, 0], [392.9, -285.7, 0, 0, 0, 0, 0, 0], [392.9, -303, 0, 0, 0, 0, 0, 0], [392.9, -316.3, 0, 0, 0, 0, 0, 0], [392.9, -331, 0, 0, 0, 0, 0, 0]] };
// let vid6 = { vname: "Lakeshore County", image: "images/peddler/lakeshore.jpg", vid: "./videos/peddler/suburbandrive.mp4", points: [[430, 99, 0, 0, 0, 0, 0, 0], [430, 85, 0, 0, 0, 0, 0, 0], [430, 55.8, 0, 0, -0.7, 9.9, 0.7, -9.9], [430, 28.3, 0, 0, 0, 0, 0, 0], [430, -19.5, 0, 0, -3.3, 15.9, 3.3, -15.9], [430, -56.9, 0, 0, -1.3, 5.3, 1.3, -5.3], [430, -115.1, 0, 0, 0, 0, 0, 0], [430, -135.7, 0, 0, 4, 9.9, -4, -9.9], [430, -167.6, 0, 0, 2.7, 8.6, -2.7, -8.6], [430, -194.4, 0, 0, 0, 0, 0, 0], [430, -218.3, 0, 0, 0, 0, 0, 0], [430, -236.3, 0, 0, 0, 0, 0, 0], [430, -251, 0, 0, 0, 0, 0, 0], [430, -271, 0, 0, 0, 0, 0, 0], [430, -325.6, 0, 0, -0.7, 5.3, 0.7, -5.3], [430, -340.3, 0, 0, 0, 0, 0, 0]] };
// let vid34 = { vname: "Rocky Prairie", image: "images/peddler/rockypark.jpg", vid: "./videos/peddler/rockypark.mp4", points: [[448.6, 105.9, 0, 0, 0, 0, 0, 0], [448.6, 88.1, 0, 0, 3.4, 9.3, -3.4, -9.3], [448.6, 62.9, 0, 0, 0.3, 8.5, -0.3, -8.5], [448.6, 21.4, 0, 0, 0.8, 18, -0.8, -18], [448.6, -10.1, 0, 0, -2.4, 7.4, 2.4, -7.4], [448.6, -29, 0, 0, 0, 0, 0, 0], [448.6, -51.6, 0, 0, 0, 8.5, 0, -8.5], [448.6, -82.1, 0, 0, 0, 0, 0, 0], [448.6, -109, 0, 0, 0, 0, 0, 0], [448.6, -123.9, 0, 0, 0, 7.7, 0, -7.7], [448.6, -141.3, 0, 0, -0.5, 5.6, 0.5, -5.6], [448.6, -174.8, 0, 0, -0.5, 12.7, 0.5, -12.7], [448.6, -205, 0, 0, -0.3, 10.9, 0.3, -10.9], [448.6, -237, 0, 0, 0, 0, 0, 0], [448.6, -266.3, 0, 0, 5.8, 10.9, -5.8, -10.9], [448.6, -294.9, 0, 0, -1.3, 4.2, 1.3, -4.2], [448.6, -317, 0, 0, 0, 0, 0, 0], [448.6, -332.2, 0, 0, 0, 0, 0, 0]] };

// list of videos with linear vertical progress bar for the previous version
/* 
let vidCoord0 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 2.1, 6.1, -2.1, -6.1], [409.3, -107.5, 0, 0, 0, 8.8, 0, -8.8], [445.4, -130, 0, 0, -2.9, 5.8, 2.9, -5.8], [434, -157.5, 0, 0, 1.6, 8.5, -1.6, -8.5], [430.8, -172.5, 0, 0, 0, 0, 0, 0], [430, -189, 0, 0, 0, 0, 0, 0], [435, -263.7, 0, 0, 0, 10.9, 0, -10.9], [430, -285, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord1 = [[430, 99, 0, 0, 0, 0, 0, 0], [434, 84.3, 0, 0, 0, 0, 0, 0], [434.9, 83.2, 0, 0, -0.5, 0.7, 0.2, -0.3], [435.7, 82.2, 0, 0, -0.3, 0.4, 2.5, -3.1], [442.6, 73.6, 0, 0, 0, 0, 0, 0], [442.6, 61.6, 0, 0, 0, 0, 0, 0], [450.6, 51.6, 0, 0, -1.3, 7.3, 1.3, -7.3], [448.6, 40.2, 0, 0, 1.3, 6, -1.3, -6], [455.9, 26.9, 0, 0, 0, 0, 0, 0], [455.2, 10.9, 0, 0, 2.7, 5.3, -2.7, -5.3], [445.3, 2.8, 0, 0, 0.7, 7.3, -0.7, -7.3], [449.2, -7.9, 0, 0, -0.7, 8, 0.7, -8], [451.9, -58.4, 0, 0, 0, 10.6, 0, -10.6], [444.6, -73, 0, 0, 0, 6, 0, -6], [440.6, -91, 0, 0, 0, 6.6, 0, -6.6], [445.9, -102.4, 0, 0, 0, 0, 0, 0], [445.3, -126.3, 0, 0, -4, 7.3, 4, -7.3], [453.9, -136.4, 0, 0, 0, 5.3, 0, -5.3], [453.2, -151.7, 0, 0, 3.3, 5.3, -3.3, -5.3], [445.9, -158.4, 0, 0, 0, 0, 0, 0], [438.6, -170.4, 0, 0, 3.3, 7.3, -3.3, -7.3], [438.6, -190.4, 0, 0, 0, 0, 0, 0], [445.2, -205.8, 0, 0, 0, 0, 0, 0], [441.3, -219.8, 0, 0, 0, 0, 0, 0], [441.9, -230.5, 0, 0, 0, 0, 0, 0], [457.2, -250.4, 0, 0, -1.3, 10.6, 1.3, -10.6], [443.9, -277.7, 0, 0, 0, 0, 0, 0, "none"], [437.6, -286.4, 0, 0, 0, 0, 0, 0], [437.3, -293.1, 0, 0, 0, 0, 0, 0], [445.9, -299.7, 0, 0, 0, 0, 0, 0], [445, -313.3, 0, 0, -0.7, 1.9, 2.9, -8.3]];
let vidCoord2 = [[430, 99, 0, 0, 0, 0, 0, 0], [433.3, 83, 0, 0, -0.7, 6.6, 0.7, -6.6], [432.7, 67, 0, 0, 0, 0, 0, 0], [433, 46.4, 0, 0, 0, 0, 0, 0], [433.3, 33, 0, 0, 0, 0, 0, 0], [439, 19.7, 0, 0, 0, 0, 0, 0], [430, 3, 0, 0, 0, 0, 0, 0], [430, -13, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, 0, 0, 0, 0], [432, -45.7, 0, 0, 0, 0, 0, 0], [435.3, -61, 0, 0, 0, 0, 0, 0], [438.6, -87.6, 0, 0, -1.3, 10.6, 1.3, -10.6], [444.5, -153.7, 0, 0, 0, 0, 0, 0], [445.3, -173.7, 0, 0, 0, 0, 0, 0], [442.6, -251, 0, 0, 0, 0, 0, 0], [439.9, -268.3, 0, 0, 0, 0, 0, 0], [437.3, -285, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 2, 6, -2, -6], [417.4, -324.3, 0, 0, 0, 0, 0, 0], [420.7, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord3 = [[436.6, 106.3, 0, 0, 0, 0, 0, 0], [433.3, 93.6, 0, 0, 0, 3.3, 0, -3.3], [435.3, 83.6, 0, 0, -2, 3.3, 2, -3.3], [440.6, 74.9, 0, 0, -2, -0.7, 2, 0.7], [443.9, 66.2, 0, 0, 2, 6.6, -2, -6.6], [442.6, 50.2, 0, 0, -1.3, 4, 1.3, -4], [448.5, 41.5, 0, 0, -0.7, 2, 0.7, -2], [451.8, 35.4, 0, 0, -0.7, 7.3, 0.7, -7.3], [446.6, 21.4, 0, 0, 0, 0, 0, 0], [438, 8, 0, 0, 0, 0, 0, 0], [436.6, -8.6, 0, 0, 3.3, 5.3, -3.3, -5.3], [429.6, -16.6, 0, 0, 1.3, 11.3, -1.3, -11.3], [440.4, -51.8, 0, 0, -0.1, 1.6, 0.2, -4.4], [439.9, -71.7, 0, 0, 0, 1, 0, -0.1], [443.3, -84.4, 0, 0, 0, 0, 0, 0], [451.9, -92.3, 0, 0, 0, 0, 0, 0], [457.1, -102.4, 0, 0, 0.7, 5.9, -0.7, -5.9], [453.9, -117.7, 0, 0, 0, 0, 0, 0], [444.6, -125.1, 0, 0, 0, 0, 0, 0], [440.6, -152.8, 0, 0, -3.3, 7.1, 3.3, -7.1], [451.9, -164.3, 0, 0, -2, 4, 2, -4], [452.5, -176.8, 0, 0, 0, 3.2, 0, -0.1], [452.5, -196.9, 0, 0, 0, 0, 0, 0], [457.2, -207.7, 0, 0, 0, 4, 0, -4], [452.5, -217.8, 0, 0, 0, 0, 0, 0], [450.6, -233.8, 0, 0, 0, 0, 0, 0], [451.2, -246.5, 0, 0, 0, 0, 0, 0], [457.9, -260.5, 0, 0, -9.3, 12.6, 9.3, -12.6], [503, -287.7, 0, 0, 0, 0, 0, 0], [516.1, -296.4, 0, 0, -2, 6.6, 2, -6.6], [516.8, -315.1, 0, 0, 0, 0, 0, 0]];
let vidCoord4 = [[392.9, 101.7, 0, 0, 0, 0, 0, 0], [398.2, 92.9, 0, 0, -2, 7.3, 2, -7.3], [398.2, 45.1, 0, 0, 0, 0, 0, 0], [406.8, 15.5, 0, 0, -5.3, 10.6, 5.3, -10.6], [413.4, -12.4, 0, 0, -4, 13.3, 4, -13.3], [427.3, -44.3, 0, 0, -2.7, 11.3, 2.7, -11.3], [430, -72.3, 0, 0, 0, 0, 0, 0], [430, -80.3, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0.7, 6, -0.7, -6], [422.7, -110.3, 0, 0, 0, 0, 0, 0], [419.4, -125, 0, 0, -1.3, 6.6, 1.3, -6.6], [430, -141, 0, 0, -2, 5.3, 2, -5.3], [431.3, -153.7, 0, 0, -1.3, 4, 1.3, -4], [438, -167.7, 0, 0, 0, 6, 0, -6], [432.7, -190.3, 0, 0, 0, 0, 0, 0], [430, -205, 0, 0, 0, 0, 0, 0], [430, -221, 0, 0, 0, 0, 0, 0], [431.3, -235, 0, 0, 1.3, 6, -1.3, -6], [425.4, -248.4, 0, 0, 2.7, 9.3, -2.7, -9.3], [425.4, -269, 0, 0, 0, 0, 0, 0], [424.7, -285.7, 0, 0, 0, 0, 0, 0], [425.4, -303, 0, 0, 0, 0, 0, 0], [422.7, -316.3, 0, 0, 0, 0, 0, 0], [412.8, -331, 0, 0, 0, 0, 0, 0]];
let vidCoord5 = [[430, 99, 0, 0, 0, 0, 0, 0], [435.3, 86.3, 0, 0, 0, 0, 0, 0], [436, 67.7, 0, 0, 1.3, 3.3, -1.3, -3.3], [430, 60.3, 0, 0, 0.7, 6.6, -0.7, -6.6], [434, 48.9, 0, 0, -1.4, 6, 1.4, -6], [434, 19, 0, 0, 0, 0, 0, 0], [434, 19, 0, 0, 0, 0, 0, 0], [436, 3, 0, 0, 0, 0, 0, 0], [434.6, -15, 0, 0, 0, 0, 0, 0], [432.7, -29, 0, 0, 0, 0, 0, 0], [434.6, -41, 0, 0, 0, 0, 0, 0], [437.3, -50.4, 0, 0, -1.3, 8.6, 1.3, -8.6], [434, -77, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0, 0, 0, 0], [430, -109, 0, 0, 0, 0, 0, 0], [432.7, -125, 0, 0, 0, 0, 0, 0], [430, -141, 0, 0, 0, 0, 0, 0], [425.4, -150.4, 0, 0, 0, 0, 0, 0], [425.4, -160.4, 0, 0, 0, 0, 0, 0], [429.3, -182.4, 0, 0, -0.7, 6.6, 0.7, -6.6], [425.4, -196.4, 0, 0, 0, 9.3, 0, -9.3], [428.7, -219.7, 0, 0, 0, 0, 0, 0], [430, -269, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, -1.3, 8, 1.3, -8], [434.6, -314.3, 0, 0, -4, 8.6, 4, -8.6], [433.3, -331.7, 0, 0, 0, 0, 0, 0]];
let vidCoord6 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, 85, 0, 0, 0, 0, 0, 0], [440.5, 55.8, 0, 0, -0.7, 9.9, 0.7, -9.9], [432, 28.3, 0, 0, 0, 0, 0, 0], [431.3, -19.5, 0, 0, -3.3, 15.9, 3.3, -15.9], [449.2, -56.9, 0, 0, -1.3, 5.3, 1.3, -5.3], [447.2, -115.1, 0, 0, 0, 0, 0, 0], [443.3, -135.7, 0, 0, 4, 9.9, -4, -9.9], [432.7, -167.6, 0, 0, 2.7, 8.6, -2.7, -8.6], [438, -194.4, 0, 0, 0, 0, 0, 0], [436.6, -218.3, 0, 0, 0, 0, 0, 0], [440.6, -236.3, 0, 0, 0, 0, 0, 0], [437.3, -251, 0, 0, 0, 0, 0, 0], [436, -271, 0, 0, 0, 0, 0, 0], [435.3, -325.6, 0, 0, -0.7, 5.3, 0.7, -5.3], [441.9, -340.3, 0, 0, 0, 0, 0, 0]];
let vidCoord7 = [[439.9, 97.7, 0, 0, 0, 0, 0, 0], [436.6, 81, 0, 0, 0, 0, 0, 0], [431.3, 67.7, 0, 0, 0, 0, 0, 0], [430, 45.7, 0, 0, 0, 0, 0, 0], [422.7, 30.3, 0, 0, 0, 0, 0, 0], [422.7, 11, 0, 0, 0, 7.3, 0, -7.3], [427.3, -10.3, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, -2, 4.6, 2, -4.6], [437.3, -41.7, 0, 0, 0, 6.6, 0, -6.6], [434.6, -60.3, 0, 0, 0, 0, 0, 0], [430, -77, 0, 0, -0.7, 7.3, 0.7, -7.3], [434, -97.6, 0, 0, 0, 0, 0, 0], [431.3, -127, 0, 0, -2.7, 9.9, 0, 0], [431.3, -127, 0, 0, 0, 0, 2.7, -9.9], [442.7, -157.7, 0, 0, 1.3, 11.3, -1.3, -11.3], [430, -181.7, 0, 0, 3.3, 8.6, -3.3, -8.6], [430, -253, 0, 0, 1.3, 5.3, -1.3, -5.3], [426, -270.3, 0, 0, 0, 0, 0, 0], [427.3, -283.7, 0, 0, 0, 0, 0, 0], [438, -300.3, 0, 0, -1.3, 7.3, 1.3, -7.3], [430, -317, 0, 0, 0, 0, 0, 0], [425.4, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord8 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, 35, 0, 0, 2, 6.6, -2, -6.6], [424, 16.3, 0, 0, 0, 0, 0, 0], [422.7, -31, 0, 0, 1.3, 3.3, -1.3, -3.3], [414.7, -45, 0, 0, 0, 0, 0, 0], [410.8, -183.1, 0, 0, -2.7, 11.9, 2.7, -11.9], [426.7, -201.8, 0, 0, -3.3, 12.6, 3.3, -12.6], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord9 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, 83, 0, 0, 0, 0, 0, 0], [430, 54, 0, 0, 0, 16.6, 0, -33.2], [430, -29, 0, 0, 0, 0, 0, 0], [442.6, -47, 0, 0, 0, 0, 0, 0], [444.6, -70.9, 0, 0, 0, 0, 0, 0], [430.7, -86.4, 0, 0, 0, 0, 0, 0], [430, -172.3, 0, 0, 0, 0, 0, 0], [439.9, -189, 0, 0, 0, 0, 0, 0], [440.6, -334.3, 0, 0, 0, 0, 0, 0]];
let vidCoord10 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, 0, 0, 0, 0], [441.3, -46.3, 0, 0, 0, 0, 0, 0], [442.6, -123.6, 0, 0, 0, 0, 0, 0], [430, -137.7, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord11 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, 67, 0, 0, 0, 0, 0, 0], [434.6, 49, 0, 0, 0, 0, 0, 0], [435.3, 33, 0, 0, 0, 0, 0, 0], [434.6, -13, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 0, 0, 0, 0], [430, -128.5, 0, 0, 0, 22.5, 0, -7.5], [430, -141, 0, 0, 0, 0, 0, 0], [435.3, -158.3, 0, 0, 0, 0, 0, 0], [447.2, -174.3, 0, 0, -2, 9.3, 2, -9.3], [448.6, -245.8, 0, 0, 0, 0, 0, 0], [443.9, -259.8, 0, 0, 0, 0, 0, 0], [445.9, -299.7, 0, 0, 0, 0, 0, 0], [443.9, -318.3, 0, 0, 0, 0, 0, 0], [443.9, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord12 = [[430, 99, 0, 0, 0, 0, 0, 0], [434.6, 85, 0, 0, 0, 0, 0, 0], [430.7, 70.3, 0, 0, 0, 0, 0, 0], [430, -29, 0, 0, 0, 0, 0, 0], [433.3, -46.3, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord13 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, 19, 0, 0, 0, 0, 0, 0], [410.7, -13, 0, 0, 0, 0, 0, 0], [410.8, -124.4, 0, 0, 0, 0, 0, 0], [430.7, -194.4, 0, 0, 0, 0, 0, 0], [418.1, -213.7, 0, 0, 0, 0, 0, 0], [416.7, -279, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord14 = [[430, 99, 0, 0, 0, 0, 0, 0], [428.7, -22.4, 0, 0, 0, 0, 0, 0], [433.4, -35.1, 0, 0, 0, 0, 0, 0], [434.6, -80.3, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord15 = [[430, 99, 0, 0, 0, 0, 0, 0], [430.8, 79, 0, 0, 0, 0, 0, 0], [430, 51, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord16 = [[443.9, 105.6, 0, 0, 0, 0, 0, 0], [430, 76.3, 0, 0, 2, 11.3, -0.1, -0.3], [429.8, 75.2, 0, 0, 0, 0.4, -1.8, -15.3], [429.3, -30.4, 0, 0, 0, 0, 0, 0], [428.7, -52.5, 0, 0, 2, 9.9, -2, -9.9], [422, -73.9, 0, 0, 2, 8, -2, -8], [422.7, -139.1, 0, 0, 0, 0, 0, 0], [422.7, -155.3, 0, 0, 2, 6.6, -2, -6.6], [418.8, -167.2, 0, 0, 0, 0, 0, 0], [420.7, -233.1, 0, 0, 0, 0, 0, 0], [429.3, -249.2, 0, 0, -5.3, 8.6, 5.3, -8.6], [439.9, -262.5, 0, 0, -2.7, 9.3, 2.7, -9.3], [439.3, -330.3, 0, 0, 0, 0, 0, 0]];
let vidCoord17 = [[430, 99, 0, 0, 0, 0, 0, 0], [436.6, 84.9, 0, 0, 0, 0, 0, 0], [441.4, 55.6, 0, 0, 0, 7.7, 0, -7.7], [432.7, 18.7, 0, 0, 0, 0, 0, 0], [430, 3, 0, 0, 0, 0, 0, 0], [430, -109, 0, 0, 0, 0, 0, 0], [433.7, -121.6, 0, 0, 0, 0, 0, 0], [435, -172.6, 0, 0, 0, 0, 0, 0], [430.5, -196.8, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, -2.1, 11.9, 2.1, -11.9], [436.4, -331.9, 0, 0, 0, 0, 0, 0]];
let vidCoord18 = [[430, 99, 0, 0, 0, 0, 0, 0], [429.5, 92.5, 0, 0, 0, 0, 0, 0], [441.6, 71.2, 0, 0, 0, 4.2, 0, -4.2], [438.2, 59.4, 0, 0, 0, 0, 0, 0], [443, 37, 0, 0, 0.5, 4, -0.5, -4], [435.8, 16.8, 0, 0, 0, 0, 0, 0], [438.8, -13, 0, 0, 0, 0, 0, 0], [433.4, -27.2, 0, 0, 0, 0, 0, 0], [438, -50.7, 0, 0, 0, 0, 0, 0], [431.9, -69, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0, 0, 0, 0], [421, -129.5, 0, 0, 6.4, 9.3, -6.4, -9.3], [412.2, -140.2, 0, 0, 0, 0, 0, 0], [411.5, -184.6, 0, 0, -4.2, 14.1, 4.2, -14.1], [432.1, -212.2, 0, 0, -1.6, 12.2, 1.6, -12.2], [427.3, -226.1, 0, 0, 0, 0, 0, 0], [423.9, -250.6, 0, 0, -2.4, 9.5, 2.4, -9.5], [441.9, -269.6, 0, 0, -0.8, 16.4, 0.8, -16.4], [454.4, -292, 0, 0, 0.3, 11.1, -0.3, -11.1], [443.8, -300.6, 0, 0, 1.9, 8, -1.9, -8], [450.7, -327.2, 0, 0, 4, 10.3, -4, -10.3]];
let vidCoord19 = [[430, 99, 0, 0, 0, 0, 0, 0], [428.9, -43.7, 0, 0, 0, 10.3, 0, -10.3], [434.4, -136.1, 0, 0, 3.2, 24.1, -3.2, -24.1], [414.6, -193, 0, 0, 2.4, 10.6, -2.4, -10.6], [415.1, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord20 = [[456.3, 96.3, 0, 0, 0, 0, 0, 0], [430, 83, 0, 0, 0, 0, 0, 0], [429.5, -57.6, 0, 0, 0, 0, 0, 0], [441.9, -68.8, 0, 0, -0.8, -18.6, 0.8, 18.6], [429.7, -81.1, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord21 = [[437.4, 99.3, 0, 0, 0, 0, 0, 0], [431.1, 77.8, 0, 0, 0.8, 8.5, -0.8, -8.5], [441.1, 61.4, 0, 0, 0, 10.1, 0, -10.1], [440.6, -57.2, 0, 0, 0, 0, 0, 0], [444.3, -64.4, 0, 0, 0, 0, 0, 0], [447, -92.6, 0, 0, -2.9, 9.5, 2.9, -9.5], [459.7, -112.6, 0, 0, 0, 0, 0, 0], [465.8, -127.4, 0, 0, 0.5, 10.6, -0.5, -10.6], [459.7, -138.6, 0, 0, 0, 0, -4.5, -12.7], [453.9, -188.3, 0, 0, -0.3, 18.6, 0.3, -18.6], [463.1, -203.4, 0, 0, -1.9, 7.7, 1.9, -7.7], [467.6, -211.3, 0, 0, -4.2, 0.3, 4.2, -0.3, "straight"], [467.6, -343.1, 0, 0, 0, 0, 0, 0]];
let vidCoord22 = [[424.4, 101.9, 0, 0, 0, 0, 0, 0], [430, 67, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord23 = [[430, 99, 0, 0, 0, 0, 0, 0], [434.8, 83, 0, 0, 1.3, 4.2, -1.3, -4.2], [429.2, 66.7, 0, 0, 0, 2.7, 0, -2.7], [432.4, 56.8, 0, 0, 0, 0, 0, 0], [436.4, 20.3, 0, 0, 0.8, 5.3, -0.8, -5.3], [427.1, -10.3, 0, 0, 0, 1.9, 0, -1.9], [427.3, -19.2, 0, 0, 2.7, 4, -2.7, -4], [418.1, -27.5, 0, 0, 0.5, 3.4, -0.5, -3.4], [426.6, -44.8, 0, 0, 0, 0, 0, 0], [430.3, -66.7, 0, 0, 0, 0, 0, 0], [426.8, -90.9, 0, 0, 0, 3.2, 0, -3.2], [431.9, -109.8, 0, 0, 0, 4.8, 0, -4.8], [426.6, -124.5, 0, 0, 0, 4.5, 0, -4.5], [431.6, -140.7, 0, 0, 0, 5.3, 0, -5.3], [426.8, -157, 0, 0, 0, 0, 0, 0], [430, -173, 0, 0, 0, 0, 0, 0], [430, -269, 0, 0, 0, 0, 0, 0], [434.3, -289.5, 0, 0, -0.5, 5.8, 0.5, -5.8], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord24 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, -61, 0, 0, 0, 0, 0, 0], [430, -61, 0, 0, 0, 0, 0, 0], [435, -116.9, 0, 0, -6.9, 18.8, 6.9, -18.8], [460.2, -159.2, 0, 0, -3.4, 9.8, 3.4, -9.8], [466.6, -246.5, 0, 0, 0, 0, 0, 0], [466.6, -305.3, 0, 0, 2.9, 13.5, -2.9, -13.5], [453.1, -325.6, 0, 0, 0, 0, 0, 0]];
let vidCoord25 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord26 = [[430, 99, 0, 0, 0, 0, 0, 0], [430, -141, 0, 0, 0, 0, 0, 0], [425.2, -171.7, 0, 0, 0, 11.1, 0, -11.1], [430, -191.4, 0, 0, -0.5, 5.3, 0.5, -5.3], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord27 = [[437.2, 99.8, 0, 0, 0, 0, 0, 0], [430, 67, 0, 0, 0.3, 9, -0.3, -9], [433.7, 48.5, 0, 0, -0.5, 3.7, 0.5, -3.7], [429.2, 7.5, 0, 0, 0.3, 12.2, -0.3, -12.2], [430, -13, 0, 0, 0, 0, 0, 0], [429.2, -44.5, 0, 0, 0, 0, 0, 0], [428.9, -135.7, 0, 0, 0, 7.7, 0, -7.7], [426.8, -148.8, 0, 0, 0, 0, 0, 0], [430, -173, 0, 0, 0, 0, 0, 0], [430, -205, 0, 0, 0, 0, 0, 0], [434.2, -235.1, 0, 0, 0, 6.6, 0, -6.6], [430, -253.3, 0, 0, 0.8, 6.9, -0.8, -6.9], [430, -301, 0, 0, 0, 0, 0, 0], [430, -317, 0, 0, 1.9, 9.5, -1.9, -9.5], [417.8, -330.1, 0, 0, 0, 0, 0, 0]];
let vidCoord28 = [[430, 99, 0, 0, 0, 0, 0, 0], [430.8, 79, 0, 0, 0, 0, 0, 0], [430, 51, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord29 = [[465, 98.7, 0, 0, 0, 0, 0, 0], [447, 62.5, 0, 0, 0, 0, 0, 0], [439.5, 26.4, 0, 0, 0, 0, 0, 0], [438.3, 4.6, 0, 0, 0.8, 13.2, -1.3, -22.9], [433.1, -86.1, 0, 0, 1.8, 30.9, -1.3, -22.2], [433.5, -314.4, 0, 0, 0.5, 8.6, -0.2, -3.1], [427.6, -330.6, 0, 0, 0, 0, 0, 0]];
let vidCoord30 = [[430, 99, 0, 0, 0, 0, 0, 0], [431.6, 3.8, 0, 0, 0, 0, 0, 0], [430, -13, 0, 0, 0, 0, 0, 0], [430, -157, 0, 0, -1.1, 6.6, 1.1, -6.6], [436.6, -171.4, 0, 0, 0, 0, 0, 0], [445.1, -204.5, 0, 0, -0.8, 7.4, 0.8, -7.4], [440.9, -222.6, 0, 0, 0, 0, 0, 0], [430.8, -249, 0, 0, 1.3, 4.5, -1.3, -4.5], [433.6, -310.1, 0, 0, 0.2, 23.6, -0.1, -7.9], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord31 = [[441.9, 97.4, 0, 0, 0, 0, 0, 0], [422.3, -37.7, 0, 0, 0, 8, 0, -8], [430, -61, 0, 0, 0, 0, 0, 0], [435.8, -117.6, 0, 0, 0, 0, 0, 0], [429.2, -131.7, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [434, -317.8, 0, 0, -4.8, 5.3, 4.8, -5.3], [447.8, -327.2, 0, 0, 0, 0, 0, 0]];
let vidCoord32 = [[430, 99, 0, 0, 0, 0, 0, 0], [449.4, -249.2, 0, 0, 0, 0, 0, 0], [434.2, -271.3, 0, 0, 0, 0, 0, 0], [432.7, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord33 = [[430, 99, 0, 0, 0, 0, 0, 0], [434.2, 83, 0, 0, 0, 0, 0, 0], [430, 51, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord34 = [[448.6, 105.9, 0, 0, 0, 0, 0, 0], [433.2, 88.1, 0, 0, 3.4, 9.3, -3.4, -9.3], [436.9, 62.9, 0, 0, 0.3, 8.5, -0.3, -8.5], [425, 21.4, 0, 0, 0.8, 18, -0.8, -18], [431.3, -10.1, 0, 0, -2.4, 7.4, 2.4, -7.4], [430, -29, 0, 0, 0, 0, 0, 0], [422.1, -51.6, 0, 0, 0, 8.5, 0, -8.5], [429.5, -82.1, 0, 0, 0, 0, 0, 0], [430, -109, 0, 0, 0, 0, 0, 0], [435.3, -123.9, 0, 0, 0, 7.7, 0, -7.7], [428.1, -141.3, 0, 0, -0.5, 5.6, 0.5, -5.6], [440.3, -174.8, 0, 0, -0.5, 12.7, 0.5, -12.7], [430, -205, 0, 0, -0.3, 10.9, 0.3, -10.9], [430, -237, 0, 0, 0, 0, 0, 0], [426.3, -266.3, 0, 0, 5.8, 10.9, -5.8, -10.9], [430, -294.9, 0, 0, -1.3, 4.2, 1.3, -4.2], [430, -317, 0, 0, 0, 0, 0, 0], [421, -332.2, 0, 0, 0, 0, 0, 0]];
let vidCoord35 = [[419.2, 100.6, 0, 0, 0, 0, 0, 0], [430, 34.2, 0, 0, -0.3, 23.3, 0.3, -23.3], [430.8, -185.6, 0, 0, 0.8, 9.5, -0.8, -9.5], [422.6, -238.8, 0, 0, 3.7, 10.9, -3.7, -10.9], [404, -280, 0, 0, 3.2, 10.1, -3.2, -10.1], [401.6, -328.2, 0, 0, 4.5, 10.1, -4.5, -10.1]];
let vidCoord36 = [[439.3, 99, 0, 0, 0, 0, 0, 0], [430, 83, 0, 0, 1.6, 11.4, -1.6, -11.4], [430.3, 65.6, 0, 0, 0, 0, 0, 0], [431.1, 35, 0, 0, 0.5, 2.4, -0.5, -2.4], [425.2, 19, 0, 0, 0, 2.1, 0, -2.1], [437.2, -12.5, 0, 0, -3.7, 10.1, 3.7, -10.1], [430.5, -22.9, 0, 0, 2.7, 1.9, -2.7, -1.9], [427.6, -45.8, 0, 0, 0, 0, 0, 0], [432.1, -61.1, 0, 0, 0, 0, 0, 0], [438, -73.9, 0, 0, 2.1, 3.2, -2.1, -3.2], [426.6, -75.3, 0, 0, 3.2, 2.1, -3.2, -2.1], [430, -125, 0, 0, 0.5, 7.4, -0.5, -7.4], [427.1, -141, 0, 0, 0, 0, 0, 0], [427.3, -171.4, 0, 0, 0, 0, 0, 0], [432.1, -205, 0, 0, 0, 0, 0, 0], [430, -221, 0, 0, 0, 0, 0, 0], [430.8, -253.3, 0, 0, 0, 0, 0, 0], [428.4, -269, 0, 0, 0, 0, 0, 0], [430.5, -282.3, 0, 0, 0, 0, 0, 0], [431.6, -317.5, 0, 0, 0, 0, 0, 0], [438.2, -328, 0, 0, 0, 0, 0, 0]];
let vidCoord37 = [[430, 99, 0, 0, 0, 0, 0, 0], [439, 87.8, 0, 0, 0, 4.5, 0, -4.5], [423.6, 77.6, 0, 0, 0.3, 2.9, -0.3, -2.9], [430, 51, 0, 0, 0.5, 7.7, -0.5, -7.7], [430, -13, 0, 0, 0, 0, 0, 0], [433.4, -24.8, 0, 0, 0, 0, 0, 0], [430, -45, 0, 0, 0, 0, 0, 0], [430, -77, 0, 0, 0, 0, 0, 0], [432.7, -93, 0, 0, 0, 0, 0, 0], [430, -125, 0, 0, 0, 0, 0, 0], [430, -125, 0, 0, 0, 0, 0, 0], [430, -141, 0, 0, 0, 0, 0, 0], [422, -153, 0, 0, 0.5, 2.9, -0.5, -2.9], [430, -205, 0, 0, -0.5, 12.5, 0.5, -12.5], [430, -269, 0, 0, 2.7, 8, -2.7, -8], [418.1, -282.9, 0, 0, 2.1, 11.4, -2.1, -11.4], [430, -333, 0, 0, 0.5, 10.9, -0.5, -10.9]];
let vidCoord38 = [[405.8, 98.7, 0, 0, 0, 0, 0, 0], [417, 65.7, 0, 0, 0, 0, 0, 0], [430, -93, 0, 0, 0.8, 15.9, -0.8, -15.9], [428.4, -140.5, 0, 0, 0, 0, 0, 0], [434, -156.7, 0, 0, 0, 0, 0, 0], [428.7, -205, 0, 0, 0, 0, 0, 0], [432.4, -235.1, 0, 0, 0, 7.2, 0, -7.2], [435.5, -268.7, 0, 0, 0.8, 9.3, -0.8, -9.3], [435.8, -300.7, 0, 0, -1.1, 10.6, 1.1, -10.6], [430, -317, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];
let vidCoord39 = [[426.6, 99, 0, 0, 0, 0, 0, 0], [439, 80.9, 0, 0, 0.5, 4.8, -0.5, -4.8], [425.2, 67, 0, 0, -0.8, 4.8, 0.8, -4.8], [449.1, 50.7, 0, 0, 0.3, 2.9, -0.3, -2.9], [408.2, 36.9, 0, 0, 0.3, 2.4, -0.3, -2.4], [426.8, 24.8, 0, 0, -2.7, 2.7, 2.7, -2.7], [433.7, 1.6, 0, 0, 0, 3.4, 0, -3.4], [426.3, -8.3, 0, 0, 4.5, 8, -4.5, -8], [430, -61, 0, 0, -1.6, 6.1, 1.6, -6.1], [440.3, -70.1, 0, 0, -0.3, 6.4, 0.3, -6.4], [430, -83.2, 0, 0, 0, 0, 0, 0], [426.6, -124.7, 0, 0, 0, 4.5, 0, -4.5], [432.7, -141.8, 0, 0, 0, 3.2, 0, -3.2], [426.3, -172.2, 0, 0, 0, 2.1, 0, -2.1], [430, -189, 0, 0, 0, 0, 0, 0], [430, -221.5, 0, 0, -2.9, 6.9, 2.9, -6.9], [438.5, -235, 0, 0, -0.3, 4, 0.3, -4], [430, -269, 0, 0, 0, 4, 0, -4], [432.7, -285.8, 0, 0, 0, 0, 0, 0], [430, -301, 0, 0, 0, 0, 0, 0], [430, -333, 0, 0, 0, 0, 0, 0]];

let newVidCoord0 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -45, 0, 0, 0, 0, 0, 0], [540, -107.5, 0, 0, 0, 0, 0, 0], [540, -130, 0, 0, 0, 0, 0, 0], [540, -157.5, 0, 0, 0, 0, 0, 0], [540, -172.5, 0, 0, 0, 0, 0, 0], [540, -189, 0, 0, 0, 0, 0, 0], [540, -263.7, 0, 0, 0, 0, 0, 0], [540, -285, 0, 0, 0, 0, 0, 0], [540, -301, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord1 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 84.3, 0, 0, 0, 0, 0, 0], [540, 83.2, 0, 0, 0, 0, 0, 0], [540, 82.2, 0, 0, 0, 0, 0, 0], [540, 73.6, 0, 0, 0, 0, 0, 0], [540, 61.6, 0, 0, 0, 0, 0, 0], [540, 51.6, 0, 0, 0, 0, 0, 0], [540, 40.2, 0, 0, 0, 0, 0, 0], [540, 26.9, 0, 0, 0, 0, 0, 0], [540, 10.9, 0, 0, 0, 0, 0, 0], [540, 2.8, 0, 0, 0, 0, 0, 0], [540, -7.9, 0, 0, 0, 0, 0, 0], [540, -58.4, 0, 0, 0, 0, 0, 0], [540, -73, 0, 0, 0, 0, 0, 0], [540, -91, 0, 0, 0, 0, 0, 0], [540, -102.4, 0, 0, 0, 0, 0, 0], [540, -126.3, 0, 0, 0, 0, 0, 0], [540, -136.4, 0, 0, 0, 0, 0, 0], [540, -151.7, 0, 0, 0, 0, 0, 0], [540, -158.4, 0, 0, 0, 0, 0, 0], [540, -170.4, 0, 0, 0, 0, 0, 0], [540, -190.4, 0, 0, 0, 0, 0, 0], [540, -205.8, 0, 0, 0, 0, 0, 0], [540, -219.8, 0, 0, 0, 0, 0, 0], [540, -230.5, 0, 0, 0, 0, 0, 0], [540, -250.4, 0, 0, 0, 0, 0, 0], [540, -277.7, 0, 0, 0, 0, 0, 0, 'none'], [540, -286.4, 0, 0, 0, 0, 0, 0], [540, -293.1, 0, 0, 0, 0, 0, 0], [540, -299.7, 0, 0, 0, 0, 0, 0], [540, -313.3, 0, 0, 0, 0, 0, 0]];
let newVidCoord2 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 83, 0, 0, 0, 0, 0, 0], [540, 67, 0, 0, 0, 0, 0, 0], [540, 46.4, 0, 0, 0, 0, 0, 0], [540, 33, 0, 0, 0, 0, 0, 0], [540, 19.7, 0, 0, 0, 0, 0, 0], [540, 3, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -45.7, 0, 0, 0, 0, 0, 0], [540, -61, 0, 0, 0, 0, 0, 0], [540, -87.6, 0, 0, 0, 0, 0, 0], [540, -153.7, 0, 0, 0, 0, 0, 0], [540, -173.7, 0, 0, 0, 0, 0, 0], [540, -251, 0, 0, 0, 0, 0, 0], [540, -268.3, 0, 0, 0, 0, 0, 0], [540, -285, 0, 0, 0, 0, 0, 0], [540, -301, 0, 0, 0, 0, 0, 0], [540, -324.3, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord3 = [[540, 106.3, 0, 0, 0, 0, 0, 0], [540, 93.6, 0, 0, 0, 0, 0, 0], [540, 83.6, 0, 0, 0, 0, 0, 0], [540, 74.9, 0, 0, 0, 0, 0, 0], [540, 66.2, 0, 0, 0, 0, 0, 0], [540, 50.2, 0, 0, 0, 0, 0, 0], [540, 41.5, 0, 0, 0, 0, 0, 0], [540, 35.4, 0, 0, 0, 0, 0, 0], [540, 21.4, 0, 0, 0, 0, 0, 0], [540, 8, 0, 0, 0, 0, 0, 0], [540, -8.6, 0, 0, 0, 0, 0, 0], [540, -16.6, 0, 0, 0, 0, 0, 0], [540, -51.8, 0, 0, 0, 0, 0, 0], [540, -71.7, 0, 0, 0, 0, 0, 0], [540, -84.4, 0, 0, 0, 0, 0, 0], [540, -92.3, 0, 0, 0, 0, 0, 0], [540, -102.4, 0, 0, 0, 0, 0, 0], [540, -117.7, 0, 0, 0, 0, 0, 0], [540, -125.1, 0, 0, 0, 0, 0, 0], [540, -152.8, 0, 0, 0, 0, 0, 0], [540, -164.3, 0, 0, 0, 0, 0, 0], [540, -176.8, 0, 0, 0, 0, 0, 0], [540, -196.9, 0, 0, 0, 0, 0, 0], [540, -207.7, 0, 0, 0, 0, 0, 0], [540, -217.8, 0, 0, 0, 0, 0, 0], [540, -233.8, 0, 0, 0, 0, 0, 0], [540, -246.5, 0, 0, 0, 0, 0, 0], [540, -260.5, 0, 0, 0, 0, 0, 0], [540, -287.7, 0, 0, 0, 0, 0, 0], [540, -296.4, 0, 0, 0, 0, 0, 0], [540, -315.1, 0, 0, 0, 0, 0, 0]];
let newVidCoord4 = [[540, 101.7, 0, 0, 0, 0, 0, 0], [540, 92.9, 0, 0, 0, 0, 0, 0], [540, 45.1, 0, 0, 0, 0, 0, 0], [540, 15.5, 0, 0, 0, 0, 0, 0], [540, -12.4, 0, 0, 0, 0, 0, 0], [540, -44.3, 0, 0, 0, 0, 0, 0], [540, -72.3, 0, 0, 0, 0, 0, 0], [540, -80.3, 0, 0, 0, 0, 0, 0], [540, -93, 0, 0, 0, 0, 0, 0], [540, -110.3, 0, 0, 0, 0, 0, 0], [540, -125, 0, 0, 0, 0, 0, 0], [540, -141, 0, 0, 0, 0, 0, 0], [540, -153.7, 0, 0, 0, 0, 0, 0], [540, -167.7, 0, 0, 0, 0, 0, 0], [540, -190.3, 0, 0, 0, 0, 0, 0], [540, -205, 0, 0, 0, 0, 0, 0], [540, -221, 0, 0, 0, 0, 0, 0], [540, -235, 0, 0, 0, 0, 0, 0], [540, -248.4, 0, 0, 0, 0, 0, 0], [540, -269, 0, 0, 0, 0, 0, 0], [540, -285.7, 0, 0, 0, 0, 0, 0], [540, -303, 0, 0, 0, 0, 0, 0], [540, -316.3, 0, 0, 0, 0, 0, 0], [540, -331, 0, 0, 0, 0, 0, 0]];
let newVidCoord5 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 86.3, 0, 0, 0, 0, 0, 0], [540, 67.7, 0, 0, 0, 0, 0, 0], [540, 60.3, 0, 0, 0, 0, 0, 0], [540, 48.9, 0, 0, 0, 0, 0, 0], [540, 19, 0, 0, 0, 0, 0, 0], [540, 19, 0, 0, 0, 0, 0, 0], [540, 3, 0, 0, 0, 0, 0, 0], [540, -15, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -41, 0, 0, 0, 0, 0, 0], [540, -50.4, 0, 0, 0, 0, 0, 0], [540, -77, 0, 0, 0, 0, 0, 0], [540, -93, 0, 0, 0, 0, 0, 0], [540, -109, 0, 0, 0, 0, 0, 0], [540, -125, 0, 0, 0, 0, 0, 0], [540, -141, 0, 0, 0, 0, 0, 0], [540, -150.4, 0, 0, 0, 0, 0, 0], [540, -160.4, 0, 0, 0, 0, 0, 0], [540, -182.4, 0, 0, 0, 0, 0, 0], [540, -196.4, 0, 0, 0, 0, 0, 0], [540, -219.7, 0, 0, 0, 0, 0, 0], [540, -269, 0, 0, 0, 0, 0, 0], [540, -301, 0, 0, 0, 0, 0, 0], [540, -314.3, 0, 0, 0, 0, 0, 0], [540, -331.7, 0, 0, 0, 0, 0, 0]];
let newVidCoord6 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 85, 0, 0, 0, 0, 0, 0], [540, 55.8, 0, 0, 0, 0, 0, 0], [540, 28.3, 0, 0, 0, 0, 0, 0], [540, -19.5, 0, 0, 0, 0, 0, 0], [540, -56.9, 0, 0, 0, 0, 0, 0], [540, -115.1, 0, 0, 0, 0, 0, 0], [540, -135.7, 0, 0, 0, 0, 0, 0], [540, -167.6, 0, 0, 0, 0, 0, 0], [540, -194.4, 0, 0, 0, 0, 0, 0], [540, -218.3, 0, 0, 0, 0, 0, 0], [540, -236.3, 0, 0, 0, 0, 0, 0], [540, -251, 0, 0, 0, 0, 0, 0], [540, -271, 0, 0, 0, 0, 0, 0], [540, -325.6, 0, 0, 0, 0, 0, 0], [540, -340.3, 0, 0, 0, 0, 0, 0]];
let newVidCoord7 = [[540, 97.7, 0, 0, 0, 0, 0, 0], [540, 81, 0, 0, 0, 0, 0, 0], [540, 67.7, 0, 0, 0, 0, 0, 0], [540, 45.7, 0, 0, 0, 0, 0, 0], [540, 30.3, 0, 0, 0, 0, 0, 0], [540, 11, 0, 0, 0, 0, 0, 0], [540, -10.3, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -41.7, 0, 0, 0, 0, 0, 0], [540, -60.3, 0, 0, 0, 0, 0, 0], [540, -77, 0, 0, 0, 0, 0, 0], [540, -97.6, 0, 0, 0, 0, 0, 0], [540, -127, 0, 0, 0, 0, 0, 0], [540, -127, 0, 0, 0, 0, 0, 0], [540, -157.7, 0, 0, 0, 0, 0, 0], [540, -181.7, 0, 0, 0, 0, 0, 0], [540, -253, 0, 0, 0, 0, 0, 0], [540, -270.3, 0, 0, 0, 0, 0, 0], [540, -283.7, 0, 0, 0, 0, 0, 0], [540, -300.3, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord8 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 35, 0, 0, 0, 0, 0, 0], [540, 16.3, 0, 0, 0, 0, 0, 0], [540, -31, 0, 0, 0, 0, 0, 0], [540, -45, 0, 0, 0, 0, 0, 0], [540, -183.1, 0, 0, 0, 0, 0, 0], [540, -201.8, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord9 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 83, 0, 0, 0, 0, 0, 0], [540, 54, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -47, 0, 0, 0, 0, 0, 0], [540, -70.9, 0, 0, 0, 0, 0, 0], [540, -86.4, 0, 0, 0, 0, 0, 0], [540, -172.3, 0, 0, 0, 0, 0, 0], [540, -189, 0, 0, 0, 0, 0, 0], [540, -334.3, 0, 0, 0, 0, 0, 0]];
let newVidCoord10 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -46.3, 0, 0, 0, 0, 0, 0], [540, -123.6, 0, 0, 0, 0, 0, 0], [540, -137.7, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord11 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 67, 0, 0, 0, 0, 0, 0], [540, 49, 0, 0, 0, 0, 0, 0], [540, 33, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -45, 0, 0, 0, 0, 0, 0], [540, -128.5, 0, 0, 0, 0, 0, 0], [540, -141, 0, 0, 0, 0, 0, 0], [540, -158.3, 0, 0, 0, 0, 0, 0], [540, -174.3, 0, 0, 0, 0, 0, 0], [540, -245.8, 0, 0, 0, 0, 0, 0], [540, -259.8, 0, 0, 0, 0, 0, 0], [540, -299.7, 0, 0, 0, 0, 0, 0], [540, -318.3, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord12 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 85, 0, 0, 0, 0, 0, 0], [540, 70.3, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -46.3, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord13 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 19, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -124.4, 0, 0, 0, 0, 0, 0], [540, -194.4, 0, 0, 0, 0, 0, 0], [540, -213.7, 0, 0, 0, 0, 0, 0], [540, -279, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord14 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -22.4, 0, 0, 0, 0, 0, 0], [540, -35.1, 0, 0, 0, 0, 0, 0], [540, -80.3, 0, 0, 0, 0, 0, 0], [540, -93, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord15 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 79, 0, 0, 0, 0, 0, 0], [540, 51, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord16 = [[540, 105.6, 0, 0, 0, 0, 0, 0], [540, 76.3, 0, 0, 0, 0, 0, 0], [540, 75.2, 0, 0, 0, 0, 0, 0], [540, -30.4, 0, 0, 0, 0, 0, 0], [540, -52.5, 0, 0, 0, 0, 0, 0], [540, -73.9, 0, 0, 0, 0, 0, 0], [540, -139.1, 0, 0, 0, 0, 0, 0], [540, -155.3, 0, 0, 0, 0, 0, 0], [540, -167.2, 0, 0, 0, 0, 0, 0], [540, -233.1, 0, 0, 0, 0, 0, 0], [540, -249.2, 0, 0, 0, 0, 0, 0], [540, -262.5, 0, 0, 0, 0, 0, 0], [540, -330.3, 0, 0, 0, 0, 0, 0]];
let newVidCoord17 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 84.9, 0, 0, 0, 0, 0, 0], [540, 55.6, 0, 0, 0, 0, 0, 0], [540, 18.7, 0, 0, 0, 0, 0, 0], [540, 3, 0, 0, 0, 0, 0, 0], [540, -109, 0, 0, 0, 0, 0, 0], [540, -121.6, 0, 0, 0, 0, 0, 0], [540, -172.6, 0, 0, 0, 0, 0, 0], [540, -196.8, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -331.9, 0, 0, 0, 0, 0, 0]];
let newVidCoord18 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 92.5, 0, 0, 0, 0, 0, 0], [540, 71.2, 0, 0, 0, 0, 0, 0], [540, 59.4, 0, 0, 0, 0, 0, 0], [540, 37, 0, 0, 0, 0, 0, 0], [540, 16.8, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -27.2, 0, 0, 0, 0, 0, 0], [540, -50.7, 0, 0, 0, 0, 0, 0], [540, -69, 0, 0, 0, 0, 0, 0], [540, -93, 0, 0, 0, 0, 0, 0], [540, -129.5, 0, 0, 0, 0, 0, 0], [540, -140.2, 0, 0, 0, 0, 0, 0], [540, -184.6, 0, 0, 0, 0, 0, 0], [540, -212.2, 0, 0, 0, 0, 0, 0], [540, -226.1, 0, 0, 0, 0, 0, 0], [540, -250.6, 0, 0, 0, 0, 0, 0], [540, -269.6, 0, 0, 0, 0, 0, 0], [540, -292, 0, 0, 0, 0, 0, 0], [540, -300.6, 0, 0, 0, 0, 0, 0], [540, -327.2, 0, 0, 0, 0, 0, 0]];
let newVidCoord19 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -43.7, 0, 0, 0, 0, 0, 0], [540, -136.1, 0, 0, 0, 0, 0, 0], [540, -193, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord20 = [[540, 96.3, 0, 0, 0, 0, 0, 0], [540, 83, 0, 0, 0, 0, 0, 0], [540, -57.6, 0, 0, 0, 0, 0, 0], [540, -68.8, 0, 0, 0, 0, 0, 0], [540, -81.1, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord21 = [[540, 99.3, 0, 0, 0, 0, 0, 0], [540, 77.8, 0, 0, 0, 0, 0, 0], [540, 61.4, 0, 0, 0, 0, 0, 0], [540, -57.2, 0, 0, 0, 0, 0, 0], [540, -64.4, 0, 0, 0, 0, 0, 0], [540, -92.6, 0, 0, 0, 0, 0, 0], [540, -112.6, 0, 0, 0, 0, 0, 0], [540, -127.4, 0, 0, 0, 0, 0, 0], [540, -138.6, 0, 0, 0, 0, 0, 0], [540, -188.3, 0, 0, 0, 0, 0, 0], [540, -203.4, 0, 0, 0, 0, 0, 0], [540, -211.3, 0, 0, 0, 0, 0, 0, 'straight'], [540, -343.1, 0, 0, 0, 0, 0, 0]];
let newVidCoord22 = [[540, 101.9, 0, 0, 0, 0, 0, 0], [540, 67, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord23 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 83, 0, 0, 0, 0, 0, 0], [540, 66.7, 0, 0, 0, 0, 0, 0], [540, 56.8, 0, 0, 0, 0, 0, 0], [540, 20.3, 0, 0, 0, 0, 0, 0], [540, -10.3, 0, 0, 0, 0, 0, 0], [540, -19.2, 0, 0, 0, 0, 0, 0], [540, -27.5, 0, 0, 0, 0, 0, 0], [540, -44.8, 0, 0, 0, 0, 0, 0], [540, -66.7, 0, 0, 0, 0, 0, 0], [540, -90.9, 0, 0, 0, 0, 0, 0], [540, -109.8, 0, 0, 0, 0, 0, 0], [540, -124.5, 0, 0, 0, 0, 0, 0], [540, -140.7, 0, 0, 0, 0, 0, 0], [540, -157, 0, 0, 0, 0, 0, 0], [540, -173, 0, 0, 0, 0, 0, 0], [540, -269, 0, 0, 0, 0, 0, 0], [540, -289.5, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord24 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -61, 0, 0, 0, 0, 0, 0], [540, -61, 0, 0, 0, 0, 0, 0], [540, -116.9, 0, 0, 0, 0, 0, 0], [540, -159.2, 0, 0, 0, 0, 0, 0], [540, -246.5, 0, 0, 0, 0, 0, 0], [540, -305.3, 0, 0, 0, 0, 0, 0], [540, -325.6, 0, 0, 0, 0, 0, 0]];
let newVidCoord25 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord26 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -141, 0, 0, 0, 0, 0, 0], [540, -171.7, 0, 0, 0, 0, 0, 0], [540, -191.4, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord27 = [[540, 99.8, 0, 0, 0, 0, 0, 0], [540, 67, 0, 0, 0, 0, 0, 0], [540, 48.5, 0, 0, 0, 0, 0, 0], [540, 7.5, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -44.5, 0, 0, 0, 0, 0, 0], [540, -135.7, 0, 0, 0, 0, 0, 0], [540, -148.8, 0, 0, 0, 0, 0, 0], [540, -173, 0, 0, 0, 0, 0, 0], [540, -205, 0, 0, 0, 0, 0, 0], [540, -235.1, 0, 0, 0, 0, 0, 0], [540, -253.3, 0, 0, 0, 0, 0, 0], [540, -301, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -330.1, 0, 0, 0, 0, 0, 0]];
let newVidCoord28 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 79, 0, 0, 0, 0, 0, 0], [540, 51, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord29 = [[540, 98.7, 0, 0, 0, 0, 0, 0], [540, 62.5, 0, 0, 0, 0, 0, 0], [540, 26.4, 0, 0, 0, 0, 0, 0], [540, 4.6, 0, 0, 0, 0, 0, 0], [540, -86.1, 0, 0, 0, 0, 0, 0], [540, -314.4, 0, 0, 0, 0, 0, 0], [540, -330.6, 0, 0, 0, 0, 0, 0]];
let newVidCoord30 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 3.8, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -157, 0, 0, 0, 0, 0, 0], [540, -171.4, 0, 0, 0, 0, 0, 0], [540, -204.5, 0, 0, 0, 0, 0, 0], [540, -222.6, 0, 0, 0, 0, 0, 0], [540, -249, 0, 0, 0, 0, 0, 0], [540, -310.1, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord31 = [[540, 97.4, 0, 0, 0, 0, 0, 0], [540, -37.7, 0, 0, 0, 0, 0, 0], [540, -61, 0, 0, 0, 0, 0, 0], [540, -117.6, 0, 0, 0, 0, 0, 0], [540, -131.7, 0, 0, 0, 0, 0, 0], [540, -301, 0, 0, 0, 0, 0, 0], [540, -317.8, 0, 0, 0, 0, 0, 0], [540, -327.2, 0, 0, 0, 0, 0, 0]];
let newVidCoord32 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, -249.2, 0, 0, 0, 0, 0, 0], [540, -271.3, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord33 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 83, 0, 0, 0, 0, 0, 0], [540, 51, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord34 = [[540, 105.9, 0, 0, 0, 0, 0, 0], [540, 88.1, 0, 0, 0, 0, 0, 0], [540, 62.9, 0, 0, 0, 0, 0, 0], [540, 21.4, 0, 0, 0, 0, 0, 0], [540, -10.1, 0, 0, 0, 0, 0, 0], [540, -29, 0, 0, 0, 0, 0, 0], [540, -51.6, 0, 0, 0, 0, 0, 0], [540, -82.1, 0, 0, 0, 0, 0, 0], [540, -109, 0, 0, 0, 0, 0, 0], [540, -123.9, 0, 0, 0, 0, 0, 0], [540, -141.3, 0, 0, 0, 0, 0, 0], [540, -174.8, 0, 0, 0, 0, 0, 0], [540, -205, 0, 0, 0, 0, 0, 0], [540, -237, 0, 0, 0, 0, 0, 0], [540, -266.3, 0, 0, 0, 0, 0, 0], [540, -294.9, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -332.2, 0, 0, 0, 0, 0, 0]];
let newVidCoord35 = [[540, 100.6, 0, 0, 0, 0, 0, 0], [540, 34.2, 0, 0, 0, 0, 0, 0], [540, -185.6, 0, 0, 0, 0, 0, 0], [540, -238.8, 0, 0, 0, 0, 0, 0], [540, -280, 0, 0, 0, 0, 0, 0], [540, -328.2, 0, 0, 0, 0, 0, 0]];
let newVidCoord36 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 83, 0, 0, 0, 0, 0, 0], [540, 65.6, 0, 0, 0, 0, 0, 0], [540, 35, 0, 0, 0, 0, 0, 0], [540, 19, 0, 0, 0, 0, 0, 0], [540, -12.5, 0, 0, 0, 0, 0, 0], [540, -22.9, 0, 0, 0, 0, 0, 0], [540, -45.8, 0, 0, 0, 0, 0, 0], [540, -61.1, 0, 0, 0, 0, 0, 0], [540, -73.9, 0, 0, 0, 0, 0, 0], [540, -75.3, 0, 0, 0, 0, 0, 0], [540, -125, 0, 0, 0, 0, 0, 0], [540, -141, 0, 0, 0, 0, 0, 0], [540, -171.4, 0, 0, 0, 0, 0, 0], [540, -205, 0, 0, 0, 0, 0, 0], [540, -221, 0, 0, 0, 0, 0, 0], [540, -253.3, 0, 0, 0, 0, 0, 0], [540, -269, 0, 0, 0, 0, 0, 0], [540, -282.3, 0, 0, 0, 0, 0, 0], [540, -317.5, 0, 0, 0, 0, 0, 0], [540, -328, 0, 0, 0, 0, 0, 0]];
let newVidCoord37 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 87.8, 0, 0, 0, 0, 0, 0], [540, 77.6, 0, 0, 0, 0, 0, 0], [540, 51, 0, 0, 0, 0, 0, 0], [540, -13, 0, 0, 0, 0, 0, 0], [540, -24.8, 0, 0, 0, 0, 0, 0], [540, -45, 0, 0, 0, 0, 0, 0], [540, -77, 0, 0, 0, 0, 0, 0], [540, -93, 0, 0, 0, 0, 0, 0], [540, -125, 0, 0, 0, 0, 0, 0], [540, -125, 0, 0, 0, 0, 0, 0], [540, -141, 0, 0, 0, 0, 0, 0], [540, -153, 0, 0, 0, 0, 0, 0], [540, -205, 0, 0, 0, 0, 0, 0], [540, -269, 0, 0, 0, 0, 0, 0], [540, -282.9, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord38 = [[540, 98.7, 0, 0, 0, 0, 0, 0], [540, 65.7, 0, 0, 0, 0, 0, 0], [540, -93, 0, 0, 0, 0, 0, 0], [540, -140.5, 0, 0, 0, 0, 0, 0], [540, -156.7, 0, 0, 0, 0, 0, 0], [540, -205, 0, 0, 0, 0, 0, 0], [540, -235.1, 0, 0, 0, 0, 0, 0], [540, -268.7, 0, 0, 0, 0, 0, 0], [540, -300.7, 0, 0, 0, 0, 0, 0], [540, -317, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
let newVidCoord39 = [[540, 99, 0, 0, 0, 0, 0, 0], [540, 80.9, 0, 0, 0, 0, 0, 0], [540, 67, 0, 0, 0, 0, 0, 0], [540, 50.7, 0, 0, 0, 0, 0, 0], [540, 36.9, 0, 0, 0, 0, 0, 0], [540, 24.8, 0, 0, 0, 0, 0, 0], [540, 1.6, 0, 0, 0, 0, 0, 0], [540, -8.3, 0, 0, 0, 0, 0, 0], [540, -61, 0, 0, 0, 0, 0, 0], [540, -70.1, 0, 0, 0, 0, 0, 0], [540, -83.2, 0, 0, 0, 0, 0, 0], [540, -124.7, 0, 0, 0, 0, 0, 0], [540, -141.8, 0, 0, 0, 0, 0, 0], [540, -172.2, 0, 0, 0, 0, 0, 0], [540, -189, 0, 0, 0, 0, 0, 0], [540, -221.5, 0, 0, 0, 0, 0, 0], [540, -235, 0, 0, 0, 0, 0, 0], [540, -269, 0, 0, 0, 0, 0, 0], [540, -285.8, 0, 0, 0, 0, 0, 0], [540, -301, 0, 0, 0, 0, 0, 0], [540, -333, 0, 0, 0, 0, 0, 0]];
*/

//old videos, should be commented out

//let vid0 = { vname: "Gondola in Venice", image: "images/peddler/gondola.jpg", vid: "./videos/peddler/gondola.mp4", points: newVidCoord0 };
// let vid1 = { vname: "French Alps", image: "images/peddler/frenchalps.jpg", vid: "./videos/peddler/alps.mp4", points: newVidCoord1 };
// let vid2 = { vname: "Central Park", image: "images/peddler/centralpark.jpg", vid: "./videos/peddler/centralpark.mp4", points: newVidCoord2 };
//let vid3 = { vname: "Rocky Desert", image: "images/peddler/rockydesert.jpg", vid: "./videos/peddler/OrmaraMountain.mp4", points: newVidCoord3 };
//let vid4 = { vname: "Country Road", image: "images/peddler/countryroad.jpg", vid: "./videos/peddler/bike.mp4", points: newVidCoord4 };
// let vid5 = { vname: "Forest Trail", image: "images/peddler/forest.jpg", vid: "./videos/peddler/forest.mp4", points: newVidCoord5 };
//let vid6 = { vname: "Lakeshore County", image: "images/peddler/lakeshore.jpg", vid: "./videos/peddler/suburbandrive.mp4", points: newVidCoord6 };
// let vid7 = { vname: "Alpine Village", image: "images/peddler/alpinevillage.jpg", vid: "./videos/peddler/alpinevillage.mp4", points: newVidCoord7 };
// let vid8 = { vname: "Evergreen Trail", image: "images/peddler/evergreen.jpg", vid: "./videos/peddler/evergreen.mp4", points: newVidCoord8 };
// let vid9 = { vname: "Bustling City", image: "images/peddler/bustlingcity.jpg", vid: "./videos/peddler/tokyo.mp4", points: newVidCoord9 };
// let vid10 = { vname: "Evening City", image: "images/peddler/eveningcity.jpg", vid: "./videos/peddler/soho.mp4", points: newVidCoord10 };
// let vid11 = { vname: "Winter Dogsled", image: "images/peddler/dogsledding.jpg", vid: "./videos/peddler/dogsledding.mp4", points: newVidCoord11 };
// let vid12 = { vname: "Eiffel Tower", image: "images/peddler/eiffeltower.jpg", vid: "./videos/peddler/eiffeltower.mp4", points: newVidCoord12 };
// let vid13 = { vname: "Outside the Louvre", image: "images/peddler/louvre.jpg", vid: "./videos/peddler/louvre.mp4", points: newVidCoord13 };
// let vid14 = { vname: "Beach Walk", image: "images/peddler/beachwalk.jpg", vid: "./videos/peddler/venicebeach.mp4", points: newVidCoord14 };
// let vid15 = { vname: "Egyptian Pyramids", image: "images/peddler/pyramids.jpg", vid: "./videos/peddler/pyramids.mp4", points: newVidCoord15 };
// let vid16 = { vname: "Majestic Mountains", image: "images/peddler/newzealand.jpg", vid: "./videos/peddler/newzealand.mp4", points: newVidCoord16 };
// let vid17 = { vname: "Italian Riviera", image: "images/peddler/italiancoast.jpg", vid: "./videos/peddler/italiancoast.mp4", points: newVidCoord17 };
// let vid18 = { vname: "Hawaiian Resort", image: "images/peddler/hawaii.jpg", vid: "./videos/peddler/hawaii.mp4", points: newVidCoord18 };
// let vid19 = { vname: "Cherry Blossoms", image: "images/peddler/cherryblossoms.jpg", vid: "./videos/peddler/cherryblossoms.mp4", points: newVidCoord19 };
// let vid20 = { vname: "Big Ben", image: "images/peddler/bigben.jpg", vid: "./videos/peddler/bigben.mp4", points: newVidCoord20 };
// let vid21 = { vname: "Bike Race", image: "images/peddler/bikerace.jpg", vid: "./videos/peddler/bikerace.mp4", points: newVidCoord21 };
// let vid22 = { vname: "Spanish Beach", image: "images/peddler/barcebeach.jpg", vid: "./videos/peddler/barcebeach.mp4", points: newVidCoord22 };
// let vid23 = { vname: "Rainforest Walk", image: "images/peddler/hawaiiforest.jpg", vid: "./videos/peddler/hawaiiforest.mp4", points: newVidCoord23 };
// let vid24 = { vname: "Cloudy Marsh", image: "images/peddler/hawaiimarsh.jpg", vid: "./videos/peddler/hawaiimarsh.mp4", points: newVidCoord24 };
// let vid25 = { vname: "Hollywood Boulevard", image: "images/peddler/hollywood.jpg", vid: "./videos/peddler/hollywood.mp4", points: newVidCoord25 };
// let vid26 = { vname: "Sunset City", image: "images/peddler/londonsunset.jpg", vid: "./videos/peddler/londonsunset.mp4", points: newVidCoord26 };
// let vid27 = { vname: "City Lakeshore", image: "images/peddler/waterfrontdrive.jpg", vid: "./videos/peddler/waterfrontdrive.mp4", points: newVidCoord27 };
// let vid28 = { vname: "Parisian Boutiques", image: "images/peddler/paris.jpg", vid: "./videos/peddler/paris.mp4", points: newVidCoord28 };
// let vid29 = { vname: "Sports Stadium", image: "images/peddler/rogerscentre.jpg", vid: "./videos/peddler/rogerscentre.mp4", points: newVidCoord29 };
// let vid30 = { vname: "Snowy Forest", image: "images/peddler/snowforest.jpg", vid: "./videos/peddler/snowforest.mp4", points: newVidCoord30 };
// let vid31 = { vname: "Tokyo at Night", image: "images/peddler/tokyonight.jpg", vid: "./videos/peddler/tokyonight.mp4", points: newVidCoord31 };
// let vid32 = { vname: "Toronto Waterfront", image: "images/peddler/torharbourfront.jpg", vid: "./videos/peddler/torharbourfront.mp4", points: newVidCoord32 };
// let vid33 = { vname: "Las Vegas Tour", image: "images/peddler/vegasstrip.jpg", vid: "./videos/peddler/vegasstrip.mp4", points: newVidCoord33 };
//let vid34 = { vname: "Rocky Prairie", image: "images/peddler/rockypark.jpg", vid: "./videos/peddler/rockypark.mp4", points: newVidCoord34 };
// let vid35 = { vname: "Cactus Trail", image: "images/peddler/arizonaroad.jpg", vid: "./videos/peddler/arizonaroad.mp4", points: newVidCoord35 };
// let vid36 = { vname: "Cliffside Cacti", image: "images/peddler/arizonatrail.jpg", vid: "./videos/peddler/arizonatrail.mp4", points: newVidCoord36 };
// let vid37 = { vname: "Sunny City", image: "images/peddler/busan.jpg", vid: "./videos/peddler/hollywood.mp4", points: newVidCoord37 };
// let vid38 = { vname: "City River", image: "images/peddler/palacemoat.jpg", vid: "./videos/peddler/palacemoat.mp4", points: newVidCoord38 };
// let vid39 = { vname: "Rocky Canyon", image: "images/peddler/brycecanyon.jpg", vid: "./videos/peddler/brycecanyon.mp4", points: newVidCoord39 };

//let arrTracks = [vid0, vid3, vid4, vid6, vid34];
// let arrTracks = [vid0, vid1, vid2, vid3, vid4, vid5, vid6, vid7, vid8, vid9, vid10, vid11, vid12, vid13, vid14, vid15, vid16, vid17, vid18, vid19, vid20, vid21, vid22, vid23, vid24, vid25, vid26, vid27, vid28, vid29, vid30, vid31, vid32, vid33, vid34, vid35, vid36, vid37, vid38, vid39];
//let vids = arrTracks.length;


/* ********************************************
 below is the list of videos used in the latest version, should not be comment out
******************************************** */

let originalVidCoord = [[540, 100, 0, 0, 0, 0, 0, 0], [540, 75, 0, 0, 0, 0, 0, 0], [540, 50, 0, 0, 0, 0, 0, 0], [540, 25, 0, 0, 0, 0, 0, 0], [540, 0, 0, 0, 0, 0, 0, 0], [540, -75, 0, 0, 0, 0, 0, 0], [540, -100, 0, 0, 0, 0, 0, 0], [540, -125, 0, 0, 0, 0, 0, 0], [540, -150, 0, 0, 0, 0, 0, 0], [540, -175, 0, 0, 0, 0, 0, 0], [540, -200, 0, 0, 0, 0, 0, 0], [540, -225, 0, 0, 0, 0, 0, 0], [540, -250, 0, 0, 0, 0, 0, 0], [540, -275, 0, 0, 0, 0, 0, 0], [540, -350, 0, 0, 0, 0, 0, -8]];
// let horizontalVidCoord = [[140, 150, 0, 0, 0, 0, 0, 0], [165, 150, 0, 0, 0, 0, 0, 0], [190, 150, 0, 0, 0, 0, 0, 0], [215, 150, 0, 0, 0, 0, 0, 0], [240, 150, 0, 0, 0, 0, 0, 0], [315, 150, 0, 0, 0, 0, 0, 0], [340, 150, 0, 0, 0, 0, 0, 0], [365, 150, 0, 0, 0, 0, 0, 0], [390, 150, 0, 0, 0, 0, 0, 0], [415, 150, 0, 0, 0, 0, 0, 0], [440, 150, 0, 0, 0, 0, 0, 0], [465, 150, 0, 0, 0, 0, 0, 0], [490, 150, 0, 0, 0, 0, 0, 0], [515, 150, 0, 0, 0, 0, 0, 0], [590, 150, 0, 0, 0, 0, 0, -8]];

let vid0 = { vname: "Amalfi Walk", image: "images/peddler/01.jpg", vid: "videos/peddler/01Amalfi.mp4", points: originalVidCoord };	
// let vid1 = { vname: "Via Tiberio 1", image: "images/peddler/02.jpg", vid: "videos/peddler/02Tiberio.mp4", points: originalVidCoord };	
let vid2 = { vname: "Via Tiberio 2", image: "images/peddler/03.jpg", vid: "videos/peddler/03Tiberio.mp4", points: originalVidCoord };	
let vid3 = { vname: "Monte Solaro 1", image: "images/peddler/04.jpg", vid: "videos/peddler/04Tiberio.mp4", points: originalVidCoord };	
let vid4 = { vname: "Monte Solaro 2", image: "images/peddler/05.jpg", vid: "videos/peddler/05Solaro.mp4", points: originalVidCoord };	
let vid5 = { vname: "San Francisco 1", image: "images/peddler/06.jpg", vid: "videos/peddler/06SanFran.mp4", points: originalVidCoord };	
let vid6 = { vname: "San Francisco 2", image: "images/peddler/07.jpg", vid: "videos/peddler/07SanFran.mp4", points: originalVidCoord };	
let vid7 = { vname: "San Francisco 3", image: "images/peddler/08.jpg", vid: "videos/peddler/08SanFran.mp4", points: originalVidCoord };	
let vid8 = { vname: "San Francisco 4", image: "images/peddler/09.jpg", vid: "videos/peddler/09SanFran.mp4", points: originalVidCoord };	
let vid9 = { vname: "Green Lake 1", image: "images/peddler/10.jpg", vid: "videos/peddler/10GreenLake.mp4", points: originalVidCoord };	
let vid10 = { vname: "Green Lake 2", image: "images/peddler/11.jpg", vid: "videos/peddler/11GreenLake.mp4", points: originalVidCoord };	
let vid11 = { vname: "Stanley Park 1", image: "images/peddler/12.jpg", vid: "videos/peddler/12Stanley.mp4", points: originalVidCoord };	
let vid12 = { vname: "Stanley Park 2", image: "images/peddler/13.jpg", vid: "videos/peddler/13Stanley.mp4", points: originalVidCoord };	
let vid13 = { vname: "Amalfi Drive 1", image: "images/peddler/14.jpg", vid: "videos/peddler/14Amalfi.mp4", points: originalVidCoord };	
let vid14 = { vname: "Amalfi Drive 2", image: "images/peddler/15.jpg", vid: "videos/peddler/15Amalfi.mp4", points: originalVidCoord };	
let vid15 = { vname: "Florence 1", image: "images/peddler/16.jpg", vid: "videos/peddler/16Florence.mp4", points: originalVidCoord };	
let vid16 = { vname: "Florence 2", image: "images/peddler/17.jpg", vid: "videos/peddler/17Florence.mp4", points: originalVidCoord };	
let vid17 = { vname: "Procida 1", image: "images/peddler/18.jpg", vid: "videos/peddler/18Procida.mp4", points: originalVidCoord };	
let vid18 = { vname: "Procida 2", image: "images/peddler/19.jpg", vid: "videos/peddler/19Procida.mp4", points: originalVidCoord };	
let vid19 = { vname: "Mt Vesuvius 1", image: "images/peddler/20.jpg", vid: "videos/peddler/20MtVesuvius.mp4", points: originalVidCoord };	
let vid20 = { vname: "Mt Vesuvius 2", image: "images/peddler/21.jpg", vid: "videos/peddler/21MtVesuvius.mp4", points: originalVidCoord };	
let vid21 = { vname: "Sphinx 1", image: "images/peddler/22.jpg", vid: "videos/peddler/22Sphinx.mp4", points: originalVidCoord };	
let vid22 = { vname: "Sphinx 2", image: "images/peddler/23.jpg", vid: "videos/peddler/23Sphinx.mp4", points: originalVidCoord };	
let vid23 = { vname: "Pyramids 1", image: "images/peddler/24.jpg", vid: "videos/peddler/24Pyramids.mp4", points: originalVidCoord };	
let vid24 = { vname: "Pyramids 2", image: "images/peddler/25.jpg", vid: "videos/peddler/25Pyramids.mp4", points: originalVidCoord };	
let vid25 = { vname: "Matera 1", image: "images/peddler/26.jpg", vid: "videos/peddler/26Matera.mp4", points: originalVidCoord };	
let vid26 = { vname: "Matera 2", image: "images/peddler/27.jpg", vid: "videos/peddler/27Matera.mp4", points: originalVidCoord };	
let vid27 = { vname: "Matera 3", image: "images/peddler/28.jpg", vid: "videos/peddler/28Matera.mp4", points: originalVidCoord };	
let vid28 = { vname: "Granville Island", image: "images/peddler/29.jpg", vid: "videos/peddler/29Granville.mp4", points: originalVidCoord };	
let vid29 = { vname: "Vancouver 1", image: "images/peddler/30.jpg", vid: "videos/peddler/30Vancouver.mp4", points: originalVidCoord };	
let vid30 = { vname: "Vancouver 2", image: "images/peddler/31.jpg", vid: "videos/peddler/31Vancouver.mp4", points: originalVidCoord };	
let vid31 = { vname: "Sasseto Forest 1", image: "images/peddler/32.jpg", vid: "videos/peddler/32SassetoForest.mp4", points: originalVidCoord };	
let vid32 = { vname: "Sasseto Forest 2", image: "images/peddler/33.jpg", vid: "videos/peddler/33SassetoForest.mp4", points: originalVidCoord };	
let vid33 = { vname: "Sermoneta 1", image: "images/peddler/34.jpg", vid: "videos/peddler/34Sermoneta.mp4", points: originalVidCoord };	
let vid34 = { vname: "Sermoneta 2", image: "images/peddler/35.jpg", vid: "videos/peddler/35Sermoneta.mp4", points: originalVidCoord };	
let vid35 = { vname: "Phoenician Steps 1", image: "images/peddler/36.jpg", vid: "videos/peddler/36PhoenicianSteps.mp4", points: originalVidCoord };	
let vid36 = { vname: "Phoenician Steps 2", image: "images/peddler/37.jpg", vid: "videos/peddler/37PhoenicianSteps.mp4", points: originalVidCoord };	
let vid37 = { vname: "Pitigliano 1", image: "images/peddler/38.jpg", vid: "videos/peddler/38Pitigliano.mp4", points: originalVidCoord };	
let vid38 = { vname: "Pitigliano 2", image: "images/peddler/39.jpg", vid: "videos/peddler/39Pitigliano.mp4", points: originalVidCoord };	
// let vid39 = { vname: "Aragonese Castle 1", image: "images/peddler/40.jpg", vid: "videos/peddler/40AragoneseCastle.mp4", points: originalVidCoord };	
let vid40 = { vname: "Aragonese Castle 2", image: "images/peddler/41.jpg", vid: "videos/peddler/41AragoneseCastle.mp4", points: originalVidCoord };	
// let vid41 = { vname: "Sant Angelo 1", image: "images/peddler/42.jpg", vid: "videos/peddler/42SantAngelo.mp4", points: originalVidCoord };	
let vid42 = { vname: "Sant Angelo 2", image: "images/peddler/43.jpg", vid: "videos/peddler/43SantAngelo.mp4", points: originalVidCoord };	
// let vid43 = { vname: "Assisi 1", image: "images/peddler/44.jpg", vid: "videos/peddler/44Assisi.mp4", points: originalVidCoord };	
let vid44 = { vname: "Assisi", image: "images/peddler/45.jpg", vid: "videos/peddler/45Assisi.mp4", points: originalVidCoord };	
let vid45 = { vname: "Mt St Helens 1", image: "images/peddler/46.jpg", vid: "videos/peddler/46MtStHelens.mp4", points: originalVidCoord };	
let vid46 = { vname: "Mt St Helens 2", image: "images/peddler/47.jpg", vid: "videos/peddler/47MtStHelens.mp4", points: originalVidCoord };	
let vid47 = { vname: "Pompeii 1", image: "images/peddler/48.jpg", vid: "videos/peddler/48Pompeii.mp4", points: originalVidCoord };	
let vid48 = { vname: "Pompeii 2", image: "images/peddler/49.jpg", vid: "videos/peddler/49Pompeii.mp4", points: originalVidCoord };	
let vid49 = { vname: "Paestum", image: "images/peddler/50.jpg", vid: "videos/peddler/50Paestum.mp4", points: originalVidCoord };	
let vid50 = { vname: "Path of the Gods 1", image: "images/peddler/51.jpg", vid: "videos/peddler/51PathOfGods.mp4", points: originalVidCoord };	
let vid51 = { vname: "Path of the Gods 2", image: "images/peddler/52.jpg", vid: "videos/peddler/52PathOfGods.mp4", points: originalVidCoord };	
let vid52 = { vname: "Path of the Gods 3", image: "images/peddler/53.jpg", vid: "videos/peddler/53PathOfGods.mp4", points: originalVidCoord };	
let vid53 = { vname: "Sorrento 3", image: "images/peddler/54.jpg", vid: "videos/peddler/54Sorrento.mp4", points: originalVidCoord };	
let vid54 = { vname: "Ponza 1", image: "images/peddler/55.jpg", vid: "videos/peddler/55Ponza.mp4", points: originalVidCoord };	
let vid55 = { vname: "Ponza 2", image: "images/peddler/56.jpg", vid: "videos/peddler/56Ponza.mp4", points: originalVidCoord };	
let vid56 = { vname: "Colosseum", image: "images/peddler/57.jpg", vid: "videos/peddler/57Colosseum.mp4", points: originalVidCoord };	
let vid57 = { vname: "Civita Di Bagnoregio", image: "images/peddler/58.jpg", vid: "videos/peddler/58CivitaDiBagnoregio.mp4", points: originalVidCoord };	
let vid58 = { vname: "Roman Forum 1", image: "images/peddler/59.jpg", vid: "videos/peddler/59RomanForum.mp4", points: originalVidCoord };	
let vid59 = { vname: "Roman Forum 2", image: "images/peddler/60.jpg", vid: "videos/peddler/60RomanForum.mp4", points: originalVidCoord };	
let vid60 = { vname: "Venice Canals 1", image: "images/peddler/61.jpg", vid: "videos/peddler/61VeniceCanals.mp4", points: originalVidCoord };	
let vid61 = { vname: "Venice Canals 2", image: "images/peddler/62.jpg", vid: "videos/peddler/62VeniceCanals.mp4", points: originalVidCoord };	
let vid62 = { vname: "Sorrento 2", image: "images/peddler/63.jpg", vid: "videos/peddler/63Sorrento.mp4", points: originalVidCoord };	
let vid63 = { vname: "Venice Night Walk 1", image: "images/peddler/64.jpg", vid: "videos/peddler/64VeniceNightWalk.mp4", points: originalVidCoord };	
let vid64 = { vname: "Venice Night Walk 2", image: "images/peddler/65.jpg", vid: "videos/peddler/65VeniceNightWalk.mp4", points: originalVidCoord };	
// let vid65 = { vname: "Venice Night Walk 3", image: "images/peddler/66.jpg", vid: "videos/peddler/66VeniceNightWalk.mp4", points: originalVidCoord };	
let vid66 = { vname: "Naples Waterfront 1", image: "images/peddler/67.jpg", vid: "videos/peddler/67NaplesWaterfront.mp4", points: originalVidCoord };	
let vid67 = { vname: "Naples Waterfront 2", image: "images/peddler/68.jpg", vid: "videos/peddler/68Naples.mp4", points: originalVidCoord };	// not waterfront in reality
let vid68 = { vname: "Paris 1", image: "images/peddler/69.jpg", vid: "videos/peddler/69Paris.mp4", points: originalVidCoord };	
let vid69 = { vname: "Paris 2", image: "images/peddler/70.jpg", vid: "videos/peddler/70Paris.mp4", points: originalVidCoord };	
let vid70 = { vname: "Paris 3", image: "images/peddler/71.jpg", vid: "videos/peddler/71ParisPark.mp4", points: originalVidCoord };	
let vid71 = { vname: "Rome River Ride", image: "images/peddler/72.jpg", vid: "videos/peddler/72RomeRiverRide.mp4", points: originalVidCoord };	
let vid72 = { vname: "Paris 4", image: "images/peddler/73.jpg", vid: "videos/peddler/73ParisLouvre.mp4", points: originalVidCoord };	
let vid73 = { vname: "Paris 5", image: "images/peddler/74.jpg", vid: "videos/peddler/74ParisGarden.mp4", points: originalVidCoord };	
// let vid74 = { vname: "Naples Waterfront 2", image: "images/peddler/75.jpg", vid: "videos/peddler/75NaplesWaterfront.mp4", points: originalVidCoord };	
let vid75 = { vname: "Paris 6", image: "images/peddler/76.jpg", vid: "videos/peddler/76ParisChamps.mp4", points: originalVidCoord };	
let vid76 = { vname: "Turnwater Falls 1", image: "images/peddler/77.jpg", vid: "videos/peddler/77TurnwaterFalls.mp4", points: originalVidCoord };	
let vid77 = { vname: "Turnwater Falls 2", image: "images/peddler/78.jpg", vid: "videos/peddler/78TurnwaterFalls.mp4", points: originalVidCoord };	
let vid78 = { vname: "Seattle", image: "images/peddler/79.jpg", vid: "videos/peddler/79Seattle.mp4", points: originalVidCoord };	
let vid79 = { vname: "Naples Waterfront 3", image: "images/peddler/80.jpg", vid: "videos/peddler/80NaplesWaterfront.mp4", points: originalVidCoord };	
let vid80 = { vname: "Seattle Waterfront 1", image: "images/peddler/81.jpg", vid: "videos/peddler/81SeattleWaterfront.mp4", points: originalVidCoord };	
let vid81 = { vname: "Naples", image: "images/peddler/82.jpg", vid: "videos/peddler/82SeattleWaterfront.mp4", points: originalVidCoord };	
let vid82 = { vname: "Seattle Waterfront 2", image: "images/peddler/83.jpg", vid: "videos/peddler/83SeattleWaterfront.mp4", points: originalVidCoord };	
let vid83 = { vname: "Lucca Wall", image: "images/peddler/84.jpg", vid: "videos/peddler/84LuccaWall.mp4", points: originalVidCoord };	
let vid84 = { vname: "Palermo 1", image: "images/peddler/85.jpg", vid: "videos/peddler/85Palermo.mp4", points: originalVidCoord };	
let vid85 = { vname: "Palermo 2", image: "images/peddler/86.jpg", vid: "videos/peddler/86Palermo.mp4", points: originalVidCoord };	
let vid86 = { vname: "Burano", image: "images/peddler/87.jpg", vid: "videos/peddler/87Burano.mp4", points: originalVidCoord };	
let vid87 = { vname: "Capri 1", image: "images/peddler/88.jpg", vid: "videos/peddler/88Capri.mp4", points: originalVidCoord };	
let vid88 = { vname: "Capri 2", image: "images/peddler/89.jpg", vid: "videos/peddler/89Capri.mp4", points: originalVidCoord };	
// let vid89 = { vname: "Procida 1", image: "images/peddler/90.jpg", vid: "videos/peddler/90Procida.mp4", points: originalVidCoord };	
let vid90 = { vname: "Procida 2", image: "images/peddler/91.jpg", vid: "videos/peddler/91Procida.mp4", points: originalVidCoord };	
let vid91 = { vname: "Portofino 1", image: "images/peddler/92.jpg", vid: "videos/peddler/92Procida.mp4", points: originalVidCoord };	
let vid92 = { vname: "Appian Way", image: "images/peddler/93.jpg", vid: "videos/peddler/93AppianWay.mp4", points: originalVidCoord };	
let vid93 = { vname: "Portofino 2", image: "images/peddler/94.jpg", vid: "videos/peddler/94Portofino.mp4", points: originalVidCoord };	
let vid94 = { vname: "Portofino 2", image: "images/peddler/94.jpg", vid: "videos/peddler/95Portofino.mp4", points: originalVidCoord };	
// let vid95 = { vname: "Aqueduct Park 1", image: "images/peddler/96.jpg", vid: "videos/peddler/96AqueductPark.mp4", points: originalVidCoord };	
let vid96 = { vname: "Portofino 3", image: "images/peddler/97.jpg", vid: "videos/peddler/97Portofino.mp4", points: originalVidCoord };	
// let vid97 = { vname: "Aqueduct Park 2", image: "images/peddler/98.jpg", vid: "videos/peddler/98AqueductPark.mp4", points: originalVidCoord };	
// let vid98 = { vname: "Herculaneum 1", image: "images/peddler/99.jpg", vid: "videos/peddler/99Herculaneum.mp4", points: originalVidCoord };	
// let vid99 = { vname: "Herculaneum 2", image: "images/peddler/100.jpg", vid: "videos/peddler/100Herculaneum.mp4", points: originalVidCoord };	
let arrTracks = [vid0, vid2, vid3, vid4, vid5, vid6, vid7, vid8, vid9, vid10, vid11, vid12, vid13, vid14, vid15, vid16, vid17, vid18, vid19, vid20, vid21, vid22, vid23, vid24, vid25, vid26, vid27, vid28, vid29, vid30, vid31, vid32, vid33, vid34, vid35, vid36, vid37, vid38, vid40, vid42, vid44, vid45, vid46, vid47, vid48, vid49, vid50, vid51, vid52, vid53, vid54, vid55, vid56, vid57, vid58, vid59, vid60, vid61, vid62, vid63, vid64, vid66, vid67, vid68, vid69, vid70, vid71, vid72, vid73, vid75, vid76, vid77, vid78, vid79, vid80, vid81, vid82, vid83, vid84, vid85, vid86, vid87, vid88, vid90, vid91, vid92, vid93, vid94, vid96];	
// let arrTracks = [vid0, vid1, vid2, vid3, vid4, vid5, vid6, vid7, vid8, vid9, vid10, vid11, vid12, vid13, vid14, vid15, vid16, vid17, vid18, vid19, vid20, vid21, vid22, vid23, vid24, vid25, vid26, vid27, vid28, vid29, vid30, vid31, vid32, vid33, vid34, vid35, vid36, vid37, vid38, vid39, vid40, vid41, vid42, vid43, vid44, vid45, vid46, vid47, vid48, vid49, vid50, vid51, vid52, vid53, vid54, vid55, vid56, vid57, vid58, vid59, vid60, vid61, vid62, vid63, vid64, vid65, vid66, vid67, vid68, vid69, vid70, vid71, vid72, vid73, vid74, vid75, vid76, vid77, vid78, vid79, vid80, vid81, vid82, vid83, vid84, vid85, vid86, vid87, vid88, vid89, vid90, vid91, vid92, vid93, vid94, vid95, vid96, vid97, vid98, vid99];	
let vids = arrTracks.length;

// this file will be in home/pi/developer/centivizerWeb/public/javascripts
let vid_YEE_HONG1;
let vid_YEE_HONG2;
let vid_YEE_HONG3;
let vid_YEE_HONG_EXTRA1;
let vid_YEE_HONG_EXTRA2;

if (LTC == "YEEHONG") {
    vid_YEE_HONG1 = { vname: "Asian Sights", image: "images/peddler/YEE_HONG/Asia1Thumbnail.jpeg", vid: "videos/peddler/YEE_HONG/2Racetest1.mp4", points: originalVidCoord};
    vid_YEE_HONG2 = { vname: "In Traffic", image: "images/peddler/YEE_HONG/Asia2Thumbnail.jpeg", vid: "videos/peddler/YEE_HONG/2Racetest2.mp4", points: originalVidCoord};
    vid_YEE_HONG3 = { vname: "On the Water", image: "images/peddler/YEE_HONG/Asia3Thumbnail.jpeg", vid: "videos/peddler/YEE_HONG/2Racetest3.mp4", points: originalVidCoord};
    vid_YEE_HONG_EXTRA1 = { vname: "San Francisco 1", image: "images/peddler/06.jpg", vid: "videos/peddler/06SanFran.mp4", points: originalVidCoord };   
    vid_YEE_HONG_EXTRA2 = { vname: "San Francisco 4", image: "images/peddler/09.jpg", vid: "videos/peddler/09SanFran.mp4", points: originalVidCoord };   
}

let vid_YCC = { vname: "New Brunswick", image: "TBD", vid: "videos/peddler/YCC/1YCC.mp4", points: originalVidCoord }

var navPath = '';
var user = '06';
let start_time = Date.now();
var intervalFunc;

// Global letiables to show current mode and active screen
let gameMode = "singlePlayer"; // singlePlayer or competitive
let currentScreen = "vidSelect";
let rejectPedals = false;
let player4Done = false;
let videoPlaying;
let noOfActivePeddlers = 0;
let ids = [];
let activeIds = [];

// 0 is for single player, 1+2 is for competitive mode locally, 3+4 is for competitive mode remotely 
let intervalNumPedals0 = 0;
let intervalNumPedals1 = 0;
let intervalNumPedals2 = 0;
let intervalNumPedals3 = 0;
let intervalNumPedals4 = 0;

let reachedEnd0 = 0;
let reachedEnd1 = 0;
let reachedEnd2 = 0;
let reachedEnd3 = 0;
let reachedEnd4 = 0;

let vidStartTime0 = 0;
let vidStartTime1 = 0;
let vidStartTime2 = 0;
let vidStartTime3 = 0;
let vidStartTime4 = 0;

let bikeTime0 = 0;
let bikeTime1 = 0;
let bikeTime2 = 0;
let bikeTime3 = 0;
let bikeTime4 = 0;

let totalPeddleCount0 = 0;
let totalPeddleCount1 = 0;
let totalPeddleCount2 = 0;
let totalPeddleCount3 = 0;
let totalPeddleCount4 = 0;
const peddleToDistanceMultiplier = 3.14 * 0.25;

// when startOfComp is true, then it is in remote competitive mode 
let startOfComp = false;
let startOfSingle = false;

// var server = http.createServer();
// server.listen(3000,'35.182.51.66');
// const remote_socket = iolisten(server);
// const STREAMING_SERVER_URL = "https://stream.braintagger.com"
// const STREAMING_SERVER_URL = "http://localhost:3000"

// const PATH_TO_IFRAME = "https://stream.braintagger.com/video_call"
const PATH_TO_IFRAME = "."

// backend url for data collection 
const BACKEND_URL = 'https://braintagger.com:3001/';
// const BACKEND_URL = 'http://localhost:8000/';

// connnecting to sockets, the remote socket connects to the AWS server, used for communication
// const remote_socket = io.connect('http://localhost:3001');
const remote_socket = io.connect('https://stream.braintagger.com:3000'); 
// uncomment the bottom line to test with peddlers
const local_socket = io.connect('http://127.0.0.1:3001');
// const iframe_socket = io.connect(STREAMING_SERVER_URL);

let idObject = {
    id: "",
    activeCount: 0
};

let eventObject = {
    timestamp: "currentTime", //current time
    typeOfInteraction: "interactionType", //buttonPress, timeStart, vidStart, sessionEnd, vidEnd, peddle, videoName
    interaction: "event", //q, w, e, a, s, d, p, videoName
    elapsedTime: "elapsedTime" // Time since video started, 0 if video has not started
};

let rejectedObject = {
    videoName: "nameOfVideo",
    timestamp: 0
}

let videoObject = {
    videoName: "nameOfVideo",
    timestamp: 0
}

let numberOfPeddlesPerPlayerObject = {
    numberOfPeddlesPerPlayer: 0,
    playerID: "idOfPlayer"
}

// Array holding all the eventObjects
let eventList = [];
let rejectedVideos = [];
let numberOfPeddlesPerPlayer = [];
const vidData = [];

//Randomize the videos displayed on the selection buttons
function randomize() {
    var n = arrTracks.length;
    var tempArr = [];
    for (var i = 0; i < n - 1; i++) {
        tempArr.push(arrTracks.splice(Math.floor(Math.random() * arrTracks.length), 1)[0]);
    }

    tempArr.push(arrTracks[0]);
    arrTracks = tempArr;
}


var trackOfCurrentPage = null;
var numberTracksPerPage = 5;
var trackIndexOfCurrentPage = null;
var videoSelected;
const videoPos = 0; // position of button on the screen
const numVids_YEE_HONG = 5;

//Set up when user selects a video
function getTrackForNextPage() {
    if (trackIndexOfCurrentPage == null) {
        trackIndexOfCurrentPage = [];
        trackOfCurrentPage = [];

        for (var r = 0; r < numberTracksPerPage; r++) {
            if (LTC == "YEEHONG" && r == videoPos) continue;
            trackIndexOfCurrentPage[r] = r;
            trackOfCurrentPage[r] = arrTracks[trackIndexOfCurrentPage[r]];
        }
        if (LTC == "YEEHONG") {
            let random_YEE_HONG = Math.floor(Math.random()*numVids_YEE_HONG);
            if (random_YEE_HONG == 0) trackOfCurrentPage[videoPos] = vid_YEE_HONG1;
            else if (random_YEE_HONG == 1) trackOfCurrentPage[videoPos] = vid_YEE_HONG2;
            else if (random_YEE_HONG == 2) trackOfCurrentPage[videoPos] = vid_YEE_HONG3;
            else if (random_YEE_HONG == 3) trackOfCurrentPage[videoPos] = vid_YEE_HONG_EXTRA1;
            else if (random_YEE_HONG == 4) trackOfCurrentPage[videoPos] = vid_YEE_HONG_EXTRA2;
        }
        if (LTC == "YCC") {
            trackOfCurrentPage[videoPos] = vid_YCC;
        }
    }

    else {
        var trackIndexOfNewPage = trackIndexOfCurrentPage[numberTracksPerPage - 1];
        for (r = 0; r < numberTracksPerPage; r++) {
            if (LTC == "YEEHONG" && r == videoPos) continue;
            trackIndexOfNewPage = trackIndexOfNewPage + 1;
            if (trackIndexOfNewPage >= vids) {
                trackIndexOfNewPage = 0;
            }
            trackIndexOfCurrentPage[r] = trackIndexOfNewPage;
            trackOfCurrentPage[r] = arrTracks[trackIndexOfCurrentPage[r]];
        }
        if (LTC == "YEEHONG") {
            let random_YEE_HONG = Math.floor(Math.random()*numVids_YEE_HONG);
            if (random_YEE_HONG == 0) trackOfCurrentPage[videoPos] = vid_YEE_HONG1;
            else if (random_YEE_HONG == 1) trackOfCurrentPage[videoPos] = vid_YEE_HONG2;
            else if (random_YEE_HONG == 2) trackOfCurrentPage[videoPos] = vid_YEE_HONG3;
            else if (random_YEE_HONG == 3) trackOfCurrentPage[videoPos] = vid_YEE_HONG_EXTRA1;
            else if (random_YEE_HONG == 4) trackOfCurrentPage[videoPos] = vid_YEE_HONG_EXTRA2;
        }
    }

    document.getElementById("but0").innerHTML = trackOfCurrentPage[0].vname;
    document.getElementById("but1").innerHTML = trackOfCurrentPage[1].vname;
    document.getElementById("but2").innerHTML = trackOfCurrentPage[2].vname;
    document.getElementById("but3").innerHTML = trackOfCurrentPage[3].vname;
    document.getElementById("but4").innerHTML = trackOfCurrentPage[4].vname;

    document.getElementById("but0").style.background = "url('" + trackOfCurrentPage[0].image + "')";
    document.getElementById("but0").style.backgroundSize = "30vh 30vh";
    document.getElementById("but1").style.background = "url('" + trackOfCurrentPage[1].image + "')";
    document.getElementById("but1").style.backgroundSize = "30vh 30vh";
    document.getElementById("but2").style.background = "url('" + trackOfCurrentPage[2].image + "')";
    document.getElementById("but2").style.backgroundSize = "30vh 30vh";
    document.getElementById("but3").style.background = "url('" + trackOfCurrentPage[3].image + "')";
    document.getElementById("but3").style.backgroundSize = "30vh 30vh";
    document.getElementById("but4").style.background = "url('" + trackOfCurrentPage[4].image + "')";
    document.getElementById("but4").style.backgroundSize = "30vh 30vh";

    document.getElementById("but0").onclick = function () { pts = trackOfCurrentPage[0].points; startOrEndVid('q'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[0].vid; recordVideoName(trackOfCurrentPage[0].vname); videoPlaying = videoSelected = trackOfCurrentPage[0].vname; recordRejectedVideos([trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); recordButtonPress('q'); };
    document.getElementById("but1").onclick = function () { pts = trackOfCurrentPage[1].points; startOrEndVid('w'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[1].vid; recordVideoName(trackOfCurrentPage[1].vname); videoPlaying = videoSelected = trackOfCurrentPage[1].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); recordButtonPress('w'); };
    document.getElementById("but2").onclick = function () { pts = trackOfCurrentPage[2].points; startOrEndVid('e'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[2].vid; recordVideoName(trackOfCurrentPage[2].vname); videoPlaying = videoSelected = trackOfCurrentPage[2].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); recordButtonPress('e'); };
    document.getElementById("but3").onclick = function () { pts = trackOfCurrentPage[3].points; startOrEndVid('a'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[3].vid; recordVideoName(trackOfCurrentPage[3].vname); videoPlaying = videoSelected = trackOfCurrentPage[3].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[4].vname]); recordButtonPress('a'); };
    document.getElementById("but4").onclick = function () { pts = trackOfCurrentPage[4].points; startOrEndVid('s'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[4].vid; recordVideoName(trackOfCurrentPage[4].vname); videoPlaying = videoSelected = trackOfCurrentPage[4].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname]); recordButtonPress('s'); };
    document.getElementById("but5").onclick = function () { getTrackForNextPage(); startOrEndVid('d'); recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); };

}

// Center points of map for all tracks
function centerArrTrackPoints(arrayOfTracks) {
    let totalTracks = arrayOfTracks.length;

    for (let i = 0; i < totalTracks; i++) {
        centerPoints(arrayOfTracks[i].points);
    }
}

// Center points of map
function centerPoints(arrayOfPoints) {
    //arrayOfPoints is an array of arrays
    // Inner array is [x, y ....]
    // Want to return new points array with x and y centered
    let minX = 0;
    let maxX = 0;
    let midX;
    let minY = 0;
    let maxY = 0;
    let midY;
    let arraySize = arrayOfPoints.length;

    for (let i = 0; i < arraySize; i++) {
        let x = arrayOfPoints[i][0];
        let y = arrayOfPoints[i][1];
        if (x > maxX) {
            maxX = x;
        }
        if (x < minX) {
            minX = x;
        }
        if (y > maxY) {
            maxY = y;
        }
        if (y > minY) {
            minY = y;
        }
    }

    midX = (minX + maxX) / 2;
    midY = (minY + maxY) / 2;

    for (let i = 0; i < arraySize; i++) {
        arrayOfPoints[i][0] = arrayOfPoints[i][0] - midX;
        arrayOfPoints[i][1] = arrayOfPoints[i][1] - midY;
    }
    return arrayOfPoints;
}

// originally used for a player select page, but not used anymore 
function playerSelectFunc() {

    document.getElementById("but6").innerHTML = "Player 1";
    document.getElementById("but7").innerHTML = "Player 2";
    document.getElementById("but9").innerHTML = "Player 3";
    document.getElementById("but10").innerHTML = "Player 4";

    document.getElementById("but6").style.background = "url(images/peddler/profile_pic.png)";
    document.getElementById("but6").style.backgroundSize = "29vh 26vh";
    document.getElementById("but7").style.background = "url(images/peddler/profile_pic.png)";
    document.getElementById("but7").style.backgroundSize = "29vh 26vh";

    document.getElementById("but9").style.background = "url(images/peddler/profile_pic.png)";
    document.getElementById("but9").style.backgroundSize = "29vh 26vh";
    document.getElementById("but10").style.background = "url(images/peddler/profile_pic.png)";
    document.getElementById("but10").style.backgroundSize = "29vh 26vh";

    document.getElementById("but6").onclick = function () { pts = trackOfCurrentPage[0].points; startOrEndVid('q'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[0].vid; recordVideoName(trackOfCurrentPage[0].vname); videoPlaying = videoSelected; recordRejectedVideos([trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); recordButtonPress('q'); };
    document.getElementById("but7").onclick = function () { pts = trackOfCurrentPage[1].points; startOrEndVid('w'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[1].vid; recordVideoName(trackOfCurrentPage[1].vname); videoPlaying = trackOfCurrentPage[1].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); recordButtonPress('w'); };
    document.getElementById("but8").onclick = function () { getTrackForNextPage(); startOrEndVid('e'); recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); };
    document.getElementById("but9").onclick = function () { pts = trackOfCurrentPage[3].points; startOrEndVid('a'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[3].vid; recordVideoName(trackOfCurrentPage[3].vname); videoPlaying = trackOfCurrentPage[3].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[4].vname]); recordButtonPress('a'); };
    document.getElementById("but10").onclick = function () { pts = trackOfCurrentPage[4].points; startOrEndVid('s'); setScreen("singlePlayer"); document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = trackOfCurrentPage[4].vid; recordVideoName(trackOfCurrentPage[4].vname); videoPlaying = trackOfCurrentPage[4].vname; recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname]); recordButtonPress('s'); };
    document.getElementById("but11").onclick = function () { getTrackForNextPage(); startOrEndVid('d'); recordRejectedVideos([trackOfCurrentPage[0].vname, trackOfCurrentPage[1].vname, trackOfCurrentPage[2].vname, trackOfCurrentPage[3].vname, trackOfCurrentPage[4].vname]); };

}

function setScreen(screenName) {
    let vidSelect = document.getElementById("vidSelect");
    let playerSelect = document.getElementById("playerSelect");
    let responseToRemoteComp = document.getElementById("responseToRemoteComp");
    let notificationToOnePlayerQuit = document.getElementById('notificationToOnePlayerQuit');
    let notificationToRejection = document.getElementById('notificationToRejection');
    let notificationToSelectingMap = document.getElementById('notificationToSelectingMap');
    let singlePlayerVid = document.getElementById("singlePlayerVid");
    let competitiveVid = document.getElementById("competitiveVid");
    let competitiveRemoteVid = document.getElementById("competitiveRemoteVid");
    let modeSelect = document.getElementById("modeSelect");
    let winWindow = document.getElementById('winWindow');
    let bikeVideo0 = document.getElementById('bikeVideo0');
    let singlePlayerWin = document.getElementById("singlePlayerWin");
    let finish1 = document.getElementById("finish1");
    let finish2 = document.getElementById("finish2");
    let promptForPedal = document.getElementById("promptForPedal");
    let currTime0;
    let currTime1;
    let currTime2;
    // let friendsBar = document.getElementById("friendsBar");
    let logo = document.getElementById("logo");
    document.getElementById('bikeVideo0').pause();
    document.getElementById('bikeVideo1').pause();
    document.getElementById('bikeVideo2').pause();
    document.getElementById('bikeVideo3').pause();
    document.getElementById('bikeVideo4').pause();

    /*if (screenName == "modeSelect") {
        currentScreen = "modeSelect";
        vidSelect.style.display = "none";
        modeSelect.style.display = "block";
        singlePlayerVid.style.display = "none";
        competitiveVid.style.display = "none";
        hideMap();
        pauseAud();
    }*/

    if (screenName == "vidSelect") {
        currentScreen = "vidSelect";
        vidSelect.style.display = "block";
        playerSelect.style.display = "none";
        // friendsBar.style.display = "block";
        //logo.style.display = "block";
        //modeSelect.style.display = "none";
        singlePlayerVid.style.display = "none";
        competitiveVid.style.display = "none";
        competitiveRemoteVid.style.display = "none";
        responseToRemoteComp.style.display = "none";
        notificationToOnePlayerQuit.style.display = "none";
        notificationToRejection.style.display = "none";
        notificationToSelectingMap.style.display = "none";
        singlePlayerWin.style.display = "none";
        promptForPedal.style.display = "none";
        document.getElementById('waitForPedal').style.display = "none";
        hideMap();
    }

    // else if (screenName == "playerSelect") {
    //     currentScreen = "playerSelect";
    //     vidSelect.style.display = "none";
    //     playerSelect.style.display = "block";
    //     //modeSelect.style.display = "none";
    //     singlePlayerVid.style.display = "none";
    //     competitiveVid.style.display = "none";
    //     competitiveRemoteVid.style.display = "none";
    //     hideMap();
    //     playerSelectFunc();
    // }

    else if (screenName == "singlePlayer") {
        console.log("screen is single player")
        waitingForPedalResponse = true;
        currentScreen = "singlePlayer";
        gameMode = "singlePlayer";
        vidSelect.style.display = "none";
        playerSelect.style.display = "none";
        // friendsBar.style.display = "none";
        //logo.style.display = "none";
        //modeSelect.style.display = "none";
        singlePlayerVid.style.display = "block";
        competitiveVid.style.display = "none";
        competitiveRemoteVid.style.display = "none";
        // promptForPedal.style.display = "block";
        
        recordGameMode(gameMode);
        resetCurrentTimes();
        resetPeddleCounts();
        randomizeAud();
        hideMap();
        map();
        speedchanger();
        currTime0 = setInterval(function () { updateCurrentTime("player0"); }, 100);

        // after 7 seconds, take out the "do you want to pedal with someone else" notification
        setTimeout(function () {
            promptForPedal.style.display = "none";
            waitingForPedalResponse = false;
        }, 7000)

        bikeVideo0.onended = function () {
            console.log("vid 0 ended");
            updateCurrentTime("player0");
            clearTimeout(currTime0);
            singlePlayerWin.style.display = "block";
            recordTime('vidEnd0', 'player0');
            reachedEnd0 = 1;

            finish1.style.display = "none";
            finish2.style.display = "none";

            // setTimeout(function () { window.location.reload(); reachedEnd0 = 0; }, 10000);
            setTimeout(function () { exitFromMap(); reachedEnd0 = 0; }, 10000);
            setStats();
            hideMap();

            var countWin = 11;
            function countdownWin() {

                if (countWin > 0) {
                    document.getElementById("ctDown2").innerHTML = countWin - 1;
                    countWin = countWin - 1;
                    setTimeout(function () { countdownWin(); }, 1000);
                }
            }
            countdownWin();
        };

    } else if (screenName == "competitive") {
        currentScreen = "competitive";
        gameMode = "competitive";
        vidSelect.style.display = "none";
        //modeSelect.style.display = "none";
        singlePlayerVid.style.display = "none";
        competitiveVid.style.display = "block";
        competitiveRemoteVid.style.display = "none";
        // friendsBar.style.display = "none";

        recordGameMode(gameMode);
        resetCurrentTimes();
        resetPeddleCounts();
        randomizeAud();
        hideMap();
        map();
        startingCountDown();

        let singlePlayerTime = document.getElementById('bikeVideo0').currentTime;
        let vid1 = document.getElementById('bikeVideo1');
        let vid2 = document.getElementById('bikeVideo2');
        vid1.currentTime = singlePlayerTime;
        vid2.currentTime = singlePlayerTime;

        currTime1 = setInterval(function () { updateCurrentTime("player1"); }, 100);
        currTime2 = setInterval(function () { updateCurrentTime("player2"); }, 100);

        bikeVideo1.onended = function () {
            console.log("vid 1 ended outer");

            updateCurrentTime("player1");
            clearTimeout(currTime1);

            finish1.style.display = "block";
            recordTime('vidEnd1', 'player1');
            reachedEnd1 = 1;

            bikeVideo2.onended = function () {
                console.log("vid 2 ended inner");

                document.getElementById("compWinner").innerHTML = "Winner: Player One";

                updateCurrentTime("player2");
                clearTimeout(currTime2);

                finish2.style.display = "block";
                recordTime('vidEnd2', 'player2');
                reachedEnd2 = 1;

                setStats();
                hideMap();

                setTimeout(function () {
                    finish1.style.display = "none";
                    finish2.style.display = "none";
                    compPlayerWin.style.display = "block";
                }, 1000);

                var countWin = 11;
                function countdownWin() {

                    if (countWin > 0) {
                        document.getElementById("compCtDown").innerHTML = countWin - 1;
                        countWin = countWin - 1;
                        setTimeout(function () { countdownWin() }, 1000);
                    }
                }
                countdownWin();
                setTimeout(function () { window.location.reload(); }, 10000);

            }

        };

        bikeVideo2.onended = function () {
            console.log("vid 2 ended outer");

            updateCurrentTime("player2");
            clearTimeout(currTime2);

            finish2.style.display = "block";
            recordTime('vidEnd2', 'player2');
            reachedEnd2 = 1;

            bikeVideo1.onended = function () {
                console.log("vid 1 ended inner");

                document.getElementById("compWinner").innerHTML = "Winner: Player Two";

                updateCurrentTime("player1");
                clearTimeout(currTime1);

                finish1.style.display = "block";
                recordTime('vidEnd1', 'player1');
                reachedEnd1 = 1;

                setStats();
                hideMap();

                setTimeout(function () {
                    finish1.style.display = "none";
                    finish2.style.display = "none";
                    compPlayerWin.style.display = "block";
                }, 1000);

                var countWin = 11;
                function countdownWin() {

                    if (countWin > 0) {
                        document.getElementById("compCtDown").innerHTML = countWin - 1;
                        countWin = countWin - 1;
                        setTimeout(function () { countdownWin() }, 1000);
                    }
                }
                countdownWin();
                setTimeout(function () { window.location.reload(); }, 10000);
            }
        };
    }
}

//A selection of songs
var song0 = { link: "/sounds/peddler/DreamALittleDreamOfMe.mp3" };
var song1 = { link: "/sounds/peddler/FlyMeToTheMoon.mp3" };
var song2 = { link: "/sounds/peddler/MoonRiver.mp3" };
var song3 = { link: "/sounds/peddler/PutYourHeadOnMyShoulder.mp3" };
var song4 = { link: "/sounds/peddler/Summertime.mp3" };
var song5 = { link: "/sounds/peddler/YouNeverCanTell.mp3" };
var song6 = { link: "/sounds/peddler/Diana.mp3" };
var song7 = { link: "/sounds/peddler/RocketMan.mp3" };
var song8 = { link: "/sounds/peddler/UnchainedMelody.mp3" };
var song9 = { link: "/sounds/peddler/UnderTheBoardwalk.mp3" };
var newsong0 = { link: "/sounds/peddler/NewAudio/alone-ramol-5399.mp3" }
var newsong1 = { link: "/sounds/peddler/NewAudio/ambient-atmospheric-4947.mp3" }
var newsong2 = { link: "/sounds/peddler/NewAudio/ambient-electronic-4948.mp3" }
var newsong3 = { link: "/sounds/peddler/NewAudio/bensound-allthat.mp3" }
var newsong4 = { link: "/sounds/peddler/NewAudio/bensound-anewbeginning.mp3" }
var newsong5 = { link: "/sounds/peddler/NewAudio/bensound-badass.mp3" }
var newsong6 = { link: "/sounds/peddler/NewAudio/bensound-beyondtheline.mp3" }
var newsong7 = { link: "/sounds/peddler/NewAudio/bensound-birthofahero_creditbensound.mp3" }
var newsong8 = { link: "/sounds/peddler/NewAudio/bensound-buddy.mp3" }
var newsong9 = { link: "/sounds/peddler/NewAudio/bensound-clapandyell.mp3" }
var newsong10 = { link: "/sounds/peddler/NewAudio/bensound-creativeminds.mp3" }
var newsong11 = { link: "/sounds/peddler/NewAudio/bensound-dance.mp3" }
var newsong12 = { link: "/sounds/peddler/NewAudio/bensound-downtown.mp3" }
var newsong13 = { link: "/sounds/peddler/NewAudio/bensound-endlessmotion.mp3" }
var newsong14 = { link: "/sounds/peddler/NewAudio/bensound-energy.mp3" }
var newsong15 = { link: "/sounds/peddler/NewAudio/bensound-erf.mp3" }
var newsong16 = { link: "/sounds/peddler/NewAudio/bensound-funday.mp3" }
var newsong17 = { link: "/sounds/peddler/NewAudio/bensound-happiness.mp3" }
var newsong18 = { link: "/sounds/peddler/NewAudio/bensound-hey.mp3" }
var newsong19 = { link: "/sounds/peddler/NewAudio/bensound-hipjazz_credit_bensound.mp3" }
var newsong20 = { link: "/sounds/peddler/NewAudio/bensound-inspire.mp3" }
var newsong21 = { link: "/sounds/peddler/NewAudio/bensound-littleidea.mp3" }
var newsong22 = { link: "/sounds/peddler/NewAudio/bensound-moose.mp3" }
var newsong23 = { link: "/sounds/peddler/NewAudio/bensound-onceagain.mp3" }
var newsong24 = { link: "/sounds/peddler/NewAudio/bensound-photoalbum_credit_bensound.mp3" }
var newsong25 = { link: "/sounds/peddler/NewAudio/bensound-punky.mp3" }
var newsong26 = { link: "/sounds/peddler/NewAudio/bensound-retrosoul.mp3" }
var newsong27 = { link: "/sounds/peddler/NewAudio/bensound-rumble.mp3" }
var newsong28 = { link: "/sounds/peddler/NewAudio/bensound-sexy.mp3" }
var newsong29 = { link: "/sounds/peddler/NewAudio/bensound-straight.mp3" }
var newsong30 = { link: "/sounds/peddler/NewAudio/bensound-sunny.mp3" }
var newsong31 = { link: "/sounds/peddler/NewAudio/bensound-sweet.mp3" }
var newsong32 = { link: "/sounds/peddler/NewAudio/bensound-ukelele.mp3" }
var newsong33 = { link: "/sounds/peddler/NewAudio/Brandenburg Concerto no. 1 in F major, BWV. 1046 - I. Allegro.mp3" }
var newsong34 = { link: "/sounds/peddler/NewAudio/corporate-motivation-4480.mp3" }
var newsong35 = { link: "/sounds/peddler/NewAudio/corporate-upbeat-motivational-4478.mp3" }
var newsong36 = { link: "/sounds/peddler/NewAudio/house-fashion-5000.mp3" }
var newsong37 = { link: "/sounds/peddler/NewAudio/innovation-3794.mp3" }
var newsong38 = { link: "/sounds/peddler/NewAudio/sweet-corporate-5023.mp3" }
var classical0 = { link: "/sounds/peddler/Classical/Alla-Turca.mp3" };
var classical1 = { link: "/sounds/peddler/Classical/Brendan_Kinsella_-_03_-_Bach_-_Aria_Variata_BVW_989_-_Variation_No_3.mp3" };
var classical2 = { link: "/sounds/peddler/Classical/Brendan_Kinsella_-_Mozart_-_Piano_Sonata_in_B-flat_major_III_Allegretto_Grazioso.mp3" };
var classical3 = { link: "/sounds/peddler/Classical/Daniel_Veesey_-_02_-_Sonata_No_1_in_F_Minor_Op_2_No_1_-_II_Adagio-1.mp3" };
var classical4 = { link: "/sounds/peddler/Classical/John_Bartmann_-_14_-_Serial_Killer.mp3" };
var classical5 = { link: "/sounds/peddler/Classical/Nathan_Eckel_-_03_-_Sonata_in_G_Minor_Didone_Abbandonata_op50_no3_-_III_Allegro_agitato_e_con_disperazione.mp3" };
var classical6 = { link: "/sounds/peddler/Classical/Orchestral-Suite-no.-2-in-B-minor-BWV-1067-7.-Badinerie.mp3" };
var classical7 = { link: "/sounds/peddler/Classical/Overture-to-The-marriage-of-Figaro-K.-492.mp3" };
var classical8 = { link: "/sounds/peddler/Classical/Vivaldi-The-Four-Seasons-Op.-8-Download-free-sheet-music.mp3" };
var audio0 = { link: "/sounds/peddler/AudioJul16/HinaCC0_004_Sound-of-passion.wav" };
var audio1 = { link: "/sounds/peddler/AudioJul16/Hndel-Xerxes-HWV-40.mp3" };
var audio2 = { link: "/sounds/peddler/AudioJul16/John_Bartmann_-_09_-_Happy_Clappy-1.mp3" };
var audio3 = { link: "/sounds/peddler/AudioJul16/Komiku_-_01_-_Level_10__Finally_together.mp3" };
var audio4 = { link: "/sounds/peddler/AudioJul16/Loyalty_Freak_Music_-_03_-_IM_ON_FIRE" };
var audio5 = { link: "/sounds/peddler/AudioJul16/TRG_Banks_-_06_-_Night_Sun.mp3" };

//Randomize the song which plays
var songTracks = [song0, song1, song2, song3, song4, song5, song6, song7, song8, song9, newsong0, newsong1, newsong2, newsong3, newsong4, newsong5, newsong6, newsong7, newsong8, newsong9, newsong10, newsong11, newsong12, newsong13, newsong14, newsong15, newsong16, newsong17, newsong18, newsong19, newsong20, newsong21, newsong22, newsong23, newsong24, newsong25, newsong26, newsong27, newsong28, newsong29, newsong30, newsong31, newsong32, newsong33, newsong34, newsong35, newsong36, newsong37, newsong38, classical0, classical1, classical2, classical3, classical4, classical5, classical6, classical7, classical8, audio0, audio1, audio2, audio3, audio4, audio5];
var sound = new Audio();

function randomizeAud() {
    var n = songTracks.length;
    var tempArr = [];
    for (var i = 0; i < n - 1; i++) {
        tempArr.push(songTracks.splice(Math.floor(Math.random() * songTracks.length), 1)[0]);
    }

    tempArr.push(songTracks[0]);
    songTracks = tempArr;

    var i = 0;
    sound.src = songTracks[i].link;
    sound.play();

    sound.onended = function () {
        i = i + 1;
        sound.src = songTracks[i].link;
        sound.play();
    };
}

function pauseAud() {
    sound.pause();
}

var scaling = "fit"; // this will resize to fit inside the screen dimensions
var color = light; // ZIM colors like green, blue, pink, faint, clear, etc.
var outerColor = dark; // any HTML colors like "violet", "#333", etc. are fine to use

const frame = new Frame();

function map() { // ES6 Arrow Funchttps://codepen.io/zimjstion - similar to function(){}
    var cur0; //current progress of video0
    var cur1; //current progress of video1
    var cur2; //current progress of video2
    var dur; //duration of video

    let vid0 = document.getElementById('bikeVideo0');
    let vid1 = document.getElementById('bikeVideo1');
    let vid2 = document.getElementById('bikeVideo2');
    let vid3 = document.getElementById('bikeVideo3');

    // often need below - so consider it part of the template
    let stage = frame.stage;

    var path = new Squiggle({
        color: 'rgba(104, 104, 104, 0.1)',
        thickness: 16,
        points: pts,
        onTop: false,
        showControls: false
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var path1 = new Squiggle({
        color: 'rgba(245, 245, 245, 0.3)',
        thickness: 12,
        points: pts,
        onTop: false,
        showControls: false
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var path2 = new Squiggle({
        color: 'rgba(104, 104, 104, 0.1)',
        thickness: 9,
        points: pts,
        onTop: false,
        showControls: false
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var path3 = new Squiggle({
        color: 'rgba(255, 255, 0, 0.3)',
        thickness: 2,
        points: pts,
        onTop: false,
        showControls: false,
        dashed: true
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var cursor0 = new Triangle(20, 30, 30, '#39B7B8')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    var cursor1 = new Triangle(20, 30, 30, '#39B7B8')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    var cursor2 = new Triangle(20, 30, 30, '#F98568')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    // Dynamic Animation
    if (gameMode == "singlePlayer") {
        cursor0.visible = true;
        cursor1.visible = false;
        cursor2.visible = false;

        dur = vid0.duration;

        // if using damping with slider then use a Ticker not a change event
        Ticker.add(function () {
            cursor0.percentComplete = (cur0 / dur) * 100;
        });
        stage.update();

    } else if (gameMode == "competitive") {
        cursor0.visible = false;
        cursor1.visible = true;
        cursor2.visible = true;

        dur = vid1.duration;
        console.log("in map competitive");

        // if using damping with slider then use a Ticker not a change event
        Ticker.add(function () {
            cursor1.percentComplete = (cur1 / dur) * 100;
            cursor2.percentComplete = (cur2 / dur) * 100;
        });
        stage.update();
    }

    stage.update(); // this is needed to show any changes

    cur0 = vid0.currentTime;
    cur1 = vid1.currentTime;
    cur2 = vid2.currentTime;

    vid0.onloadedmetadata = function () {
        dur = vid0.duration;
    };
    // vid1.onloadedmetadata = function () {
    //     dur = vid1.duration;
    // };

    clearInterval(intervalFunc);	

    intervalFunc = setInterval(function () {
        cur0 = vid0.currentTime;
        cur1 = vid1.currentTime;
        cur2 = vid2.currentTime;
        document.getElementById("bikeProgress0").innerHTML = Math.floor((cur0 / dur) * 100) + " %";
        document.getElementById("bikeProgress1").innerHTML = Math.floor((cur1 / dur) * 100) + " %";
        document.getElementById("bikeProgress2").innerHTML = Math.floor((cur2 / dur) * 100) + " %";
    }, 250);
};

function hideMap() {
    let stage = frame.stage;
    stage.removeAllChildren();
    stage.update();
}

// Countdown before video
function startingCountDown() {
    var countDown = 6;
    var countDown1 = 6;

    rejectPedals = true;
    function countDownHelper() {
        if (countDown > 1) {
            document.getElementById("ctDown").innerHTML = countDown - 1;
            countDown = countDown - 1;
            setTimeout(function () { countDownHelper() }, 1000);
        } else if (countDown == 1) {
            document.getElementById("ctDown").innerHTML = "Go!";
            countDown = countDown - 1;
            setTimeout(function () { countDownHelper() }, 1000);
        } else {
            // countDown == 0
            document.getElementById("ctDown").innerHTML = "";
            rejectPedals = false;
            speedchanger();
            vidStartTime1 = Date.now();
            vidStartTime2 = vidStartTime1;
        }
    } function countDownHelper1() {
        if (countDown1 > 1) {
            document.getElementById("ctDown1").innerHTML = countDown1 - 1;
            countDown1 = countDown1 - 1;
            setTimeout(function () { countDownHelper1() }, 1000);
        } else if (countDown1 == 1) {
            document.getElementById("ctDown1").innerHTML = "Go!";
            countDown1 = countDown1 - 1;
            setTimeout(function () { countDownHelper1() }, 1000);
        } else {
            // countDown == 0
            document.getElementById("ctDown1").innerHTML = "";
            rejectPedals = false;
            speedchanger();
            vidStartTime3 = Date.now();
            vidStartTime4 = vidStartTime3;
        }
    }
    countDownHelper();
    countDownHelper1();

}

function millisToMins(millis) {
    var minutes = Math.floor(millis / 60000);
    var seconds = ((millis % 60000) / 1000).toFixed(0);
    return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
}

var resumedTime0 = 0;
var resumed = 0;
var totalTime = 0;
var counted = false;
var first = true;

function updateCurrentTime(player) {
    if (vidStartTime0 != 0 && player == "player0") {
        if (waitingForRemoteResponse) {
            bikeTime0 = bikeTime0;
            if (!counted) {
                if (first) {
                    totalTime = totalTime + (resumeSinglePlayerBikeTime - vidStartTime0);
                    first = false;
                }
                else {
                    totalTime = totalTime + (resumeSinglePlayerBikeTime - resumedTime0);
                }
                counted = true;
            }
        }
        else if (resumed == 1) {
            bikeTime0 = totalTime + Date.now() - resumedTime0;
            counted = false;

        }
        else {
            bikeTime0 = Date.now() - vidStartTime0;
        }
        document.getElementById("bikeTime0").innerHTML = millisToMins(bikeTime0);
        document.getElementById("bikeTime0Win").innerHTML = millisToMins(bikeTime0);
    } else if (vidStartTime1 != 0 && player == "player1") {
        bikeTime1 = Date.now() - vidStartTime1;
        document.getElementById("bikeTime1").innerHTML = millisToMins(bikeTime1);
        document.getElementById("bikeTime1Win").innerHTML = millisToMins(bikeTime1);
    } else if (vidStartTime2 != 0 && player == "player2") {
        bikeTime2 = Date.now() - vidStartTime2;
        document.getElementById("bikeTime2").innerHTML = millisToMins(bikeTime2);
        document.getElementById("bikeTime2Win").innerHTML = millisToMins(bikeTime2);
    }
    else if (vidStartTime3 != 0 && player == "player3") {
        bikeTime3 = Date.now() - vidStartTime3;
        document.getElementById("bikeTime3").innerHTML = millisToMins(bikeTime3);
        document.getElementById("bikeTime3Win").innerHTML = millisToMins(bikeTime3);
    }
    else if (vidStartTime4 != 0 && player == "player4") {
        bikeTime4 = Date.now() - vidStartTime4;
        document.getElementById("bikeTime4").innerHTML = millisToMins(bikeTime4);
        document.getElementById("bikeTime4Win").innerHTML = millisToMins(bikeTime4);
    }
}

function resetCurrentTimes() {
    bikeTime0 = 0;
    bikeTime1 = 0;
    bikeTime2 = 0;
    document.getElementById("bikeTime2").innerHTML = millisToMins(bikeTime0);
    document.getElementById("bikeTime2Win").innerHTML = millisToMins(bikeTime0);
    document.getElementById("bikeTime2").innerHTML = millisToMins(bikeTime1);
    document.getElementById("bikeTime2Win").innerHTML = millisToMins(bikeTime1);
    document.getElementById("bikeTime2").innerHTML = millisToMins(bikeTime2);
    document.getElementById("bikeTime2Win").innerHTML = millisToMins(bikeTime2);
}

function resetPeddleCounts() {
    totalPeddleCount0 = 0;
    totalPeddleCount1 = 0;
    totalPeddleCount2 = 0;
    totalPeddleCount3 = 0;
    totalPeddleCount4 = 0;
}

function setStats() {
    
    document.getElementById("totalPeddleCount0").innerHTML = totalPeddleCount0;
    document.getElementById("totalPeddleCount1").innerHTML = totalPeddleCount1;
    document.getElementById("totalPeddleCount2").innerHTML = totalPeddleCount2;
    document.getElementById("totalPeddleCount3").innerHTML = totalPeddleCount3;
    document.getElementById("totalPeddleCount4").innerHTML = totalPeddleCount4;

    document.getElementById("peddleRate0").innerHTML = Math.round(100000 * totalPeddleCount0 / bikeTime0) / 100;
    document.getElementById("peddleRate1").innerHTML = Math.round(100000 * totalPeddleCount1 / bikeTime1) / 100;
    document.getElementById("peddleRate2").innerHTML = Math.round(100000 * totalPeddleCount2 / bikeTime2) / 100;

    document.getElementById("peddleRate3").innerHTML = Math.round(100000 * totalPeddleCount3 / bikeTime3) / 100;
    document.getElementById("peddleRate4").innerHTML = Math.round(100000 * totalPeddleCount4 / bikeTime4) / 100;
    document.getElementById("bikeDistance0").innerHTML = (totalPeddleCount0 * peddleToDistanceMultiplier).toFixed(2);
    document.getElementById("bikeDistance1").innerHTML = (totalPeddleCount1 * peddleToDistanceMultiplier).toFixed(2);
    document.getElementById("bikeDistance2").innerHTML = (totalPeddleCount2 * peddleToDistanceMultiplier).toFixed(2);
    document.getElementById("bikeDistance3").innerHTML = (totalPeddleCount3 * peddleToDistanceMultiplier).toFixed(2);
    document.getElementById("bikeDistance4").innerHTML = (totalPeddleCount4 * peddleToDistanceMultiplier).toFixed(2);

}

var video3PercentageComplete=0;
var video4PercentageComplete=0;
var sentPercentage=0; 

// used for the remote competitive mode 
function mapRemote() { // ES6 Arrow Funchttps://codepen.io/zimjstion - similar to function(){}
    var cur0; //current progress of video0
    var cur1; //current progress of video1
    var cur2; //current progress of video2
    var dur; //duration of video

    let vid0 = document.getElementById('bikeVideo0');
    let vid1 = document.getElementById('bikeVideo1');
    let vid2 = document.getElementById('bikeVideo2');
    let vid3 = document.getElementById('bikeVideo3');
    let vid4 = document.getElementById('bikeVideo4');

    // often need below - so consider it part of the template
    let stage = frame.stage;

    var path = new Squiggle({
        color: 'rgba(104, 104, 104, 0.1)',
        thickness: 16,
        points: pts,
        onTop: false,
        showControls: false
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var path1 = new Squiggle({
        color: 'rgba(245, 245, 245, 0.3)',
        thickness: 12,
        points: pts,
        onTop: false,
        showControls: false
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var path2 = new Squiggle({
        color: 'rgba(104, 104, 104, 0.1)',
        thickness: 9,
        points: pts,
        onTop: false,
        showControls: false
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    var path3 = new Squiggle({
        color: 'rgba(255, 255, 0, 0.3)',
        thickness: 2,
        points: pts,
        onTop: false,
        showControls: false,
        dashed: true
    }).pos({ x: 280, y: 200, right: true, bottom: true });

    // the triangle cursors on the map 
    var cursor0 = new Triangle(20, 30, 30, '#39B7B8')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    var cursor1 = new Triangle(20, 30, 30, '#39B7B8')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    var cursor3 = new Triangle(20, 30, 30, '#39B7B8')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    var cursor2 = new Triangle(20, 30, 30, '#F98568')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    var cursor4 = new Triangle(20, 30, 30, '#F98568')
        .centerReg()
        .sca(1, -1)
        .rot(-90)
        .animate({
            props: {
                // orient:false,
                path: path
            },
            time: 2000,
            ease: "linear",
            startPaused: true
        });

    cursor0.visible = false;
    cursor1.visible = false;
    cursor2.visible = false;
    cursor3.visible = true;
    cursor4.visible = true;

    dur = vid3.duration;
    console.log("in map competitive");

    cur0 = vid0.currentTime;
    cur1 = vid1.currentTime;
    cur2 = vid2.currentTime;
    cur3 = vid3.currentTime;
    cur4 = vid4.currentTime;

    // if using damping with slider then use a Ticker not a change event
    Ticker.add(function () {
        cursor1.percentComplete = (cur1 / dur) * 100;
        cursor2.percentComplete = (cur2 / dur) * 100;
        cursor3.percentComplete = (cur3 / dur) * 100;
        cursor4.percentComplete = video4PercentageComplete;

        // updating the opponent's progress in remote comp. mode
        video3PercentageComplete = cursor3.percentComplete;
        if (sentPercentage != video3PercentageComplete) {
            let progress = {
                data: user,
                percentage: video3PercentageComplete
            }
            remote_socket.emit("update opponent percentage", progress);
            sentPercentage = video3PercentageComplete;
        }

        if (video4PercentageComplete != 100) {
            vid4.currentTime = video4PercentageComplete/100*dur;
        }

    });

    stage.update(); // this is needed to show any changes

    vid0.onloadedmetadata = function () {
        dur = vid0.duration;
    };
    vid1.onloadedmetadata = function () {
        dur = vid1.duration;
    };

    clearInterval(intervalFunc);	

    intervalFunc = setInterval(function () {
        cur0 = vid0.currentTime;
        cur1 = vid1.currentTime;
        cur2 = vid2.currentTime;

        cur3 = vid3.currentTime;
        cur4 = vid4.currentTime;
        document.getElementById("bikeProgress0").innerHTML = Math.floor((cur0 / dur) * 100) + " %";
        document.getElementById("bikeProgress1").innerHTML = Math.floor((cur1 / dur) * 100) + " %";
        document.getElementById("bikeProgress2").innerHTML = Math.floor((cur2 / dur) * 100) + " %";
        document.getElementById("bikeProgress3").innerHTML = Math.floor((cur3 / dur) * 100) + " %";
        document.getElementById("bikeProgress4").innerHTML = Math.floor((cur4 / dur) * 100) + " %";

    }, 250);
};

// used for syncing videos on both parties 
function setScreenRemotePrev() {
    var count = 0;
    while (arrTracks[count].vname != mapSelectedForComp) {
        count++;
    }
    pts = arrTracks[count].points;
    startOrEndVid('r');
    document.getElementById("bikeVideo0").src = document.getElementById("bikeVideo1").src = document.getElementById("bikeVideo2").src = document.getElementById("bikeVideo3").src = document.getElementById("bikeVideo4").src = arrTracks[count].vid;
    recordVideoName(arrTracks[count].vname);
    videoPlaying = videoSelected = arrTracks[count].vname;
};

// setting the screen used by remote competitive mode 
function setScreenRemote() {

    setScreenRemotePrev();
    let vidSelect = document.getElementById("vidSelect");
    let singlePlayerVid = document.getElementById("singlePlayerVid");
    let competitiveVid = document.getElementById("competitiveVid");
    let competitiveRemoteVid = document.getElementById("competitiveRemoteVid");
    let modeSelect = document.getElementById("modeSelect");
    let winWindow = document.getElementById('winWindow');
    let bikeVideo0 = document.getElementById('bikeVideo0');
    let singlePlayerWin = document.getElementById("singlePlayerWin");
    let finish1 = document.getElementById("finish1");
    let finish2 = document.getElementById("finish2");
    // let friendsBar = document.getElementById("friendsBar");
    let currTime0;
    let currTime1;
    let currTime2;
    document.getElementById('bikeVideo0').pause();
    document.getElementById('bikeVideo1').pause();
    document.getElementById('bikeVideo2').pause();
    document.getElementById('bikeVideo3').pause();
    document.getElementById('bikeVideo4').pause();

    /*if (screenName == "modeSelect") {
        currentScreen = "modeSelect";
        vidSelect.style.display = "none";
        modeSelect.style.display = "block";
        singlePlayerVid.style.display = "none";
        competitiveVid.style.display = "none";
        hideMap();
        pauseAud();
    }*/

    currentScreen = "competitive";
    gameMode = "competitive";
    vidSelect.style.display = "none";
    //modeSelect.style.display = "none";
    // friendsBar.style.display = "none";

    singlePlayerVid.style.display = "none";
    competitiveVid.style.display = "none";
    competitiveRemoteVid.style.display = "block";
    console.log("The screen is now set to remote comp mode");

    recordGameMode(gameMode);
    resetCurrentTimes();
    resetPeddleCounts();
    randomizeAud();
    hideMap();
    mapRemote();
    startingCountDown();

    let singlePlayerTime = document.getElementById('bikeVideo0').currentTime;
    let vid1 = document.getElementById('bikeVideo1');
    let vid2 = document.getElementById('bikeVideo2');
    let vid3 = document.getElementById('bikeVideo3');
    let vid4 = document.getElementById('bikeVideo4');
    vid1.currentTime = singlePlayerTime;
    vid2.currentTime = singlePlayerTime;
    vid3.currentTime = singlePlayerTime;
    vid4.currentTime = singlePlayerTime;

    document.getElementById('bikeVideo3').volume = 0.5;

    currTime1 = setInterval(function () { updateCurrentTime("player1"); }, 100);
    currTime2 = setInterval(function () { updateCurrentTime("player2"); }, 100);
    currTime3 = setInterval(function () { updateCurrentTime("player3"); }, 100);
    currTime4 = setInterval(function () { updateCurrentTime("player4"); }, 100);

    // if self player finishes first 
    bikeVideo3.onended = function () {
        console.log("vid 3 ended outer");

        updateCurrentTime("player3");
        clearTimeout(currTime3);

        finish3.style.display = "block";
        recordTime('vidEnd3', 'player3');
        reachedEnd3 = 1;
        // remote_socket.emit("")

        bikeVideo4.onended = function () {
            console.log("vid 4 ended inner");
            player4Done = true;

            document.getElementById("compRemoteWinner").innerHTML = "Winner: Player Two";

            updateCurrentTime("player4");
            clearTimeout(currTime4);

            finish4.style.display = "block";
            recordTime('vidEnd4', 'player4');
            reachedEnd4 = 1;

            setStats();
            hideMap();

            setTimeout(function () {
                finish3.style.display = "none";
                finish4.style.display = "none";
                compPlayerWin.style.display = "none";
                compRemotePlayerWin.style.display = "block";

            }, 1000);

            var countWin = 11;
            function countdownWin() {

                if (countWin > 0) {
                    document.getElementById("compRemoteCtDown").innerHTML = countWin - 1;
                    countWin = countWin - 1;
                    setTimeout(function () { countdownWin() }, 1000);
                }
            }
            countdownWin();
            setTimeout(function () { window.location.reload(); }, 10000);

        }

    };

    // if opponent finishes race first 
    bikeVideo4.onended = function () {
        console.log("vid 4 ended outer");
        player4Done = true;
        updateCurrentTime("player4");
        clearTimeout(currTime4);

        finish4.style.display = "block";
        recordTime('vidEnd4', 'player4');
        reachedEnd4 = 1;

        bikeVideo3.onended = function () {
            console.log("vid 3 ended inner");

            document.getElementById("compRemoteWinner").innerHTML = "Winner: Player One";

            updateCurrentTime("player3");
            clearTimeout(currTime3);

            finish3.style.display = "block";
            recordTime('vidEnd3', 'player3');
            reachedEnd3 = 1;

            setStats();
            hideMap();

            setTimeout(function () {
                finish3.style.display = "none";
                finish4.style.display = "none";
                compPlayerWin.style.display = "none";
                compRemotePlayerWin.style.display = "block";

            }, 1000);

            var countWin = 11;
            function countdownWin() {

                if (countWin > 0) {
                    document.getElementById("compRemoteCtDown").innerHTML = countWin - 1;
                    countWin = countWin - 1;
                    setTimeout(function () { countdownWin() }, 1000);
                }
            }
            countdownWin();
            setTimeout(function () { window.location.reload(); }, 10000);
        }
    };

}

// used for different notifications to different scenarios 
// when a player quits the remote competitive mode 
function notificationToOnePlayerQuit() {
    let notificationToOnePlayerQuit = document.getElementById('notificationToOnePlayerQuit');
    notificationToOnePlayerQuit.style.display = "block";

    setInterval(function () {
        notificationToOnePlayerQuit.style.display = "none";
    }, 5000);

}

// when a player rejects an invitation for a remote comp. mode 
function notificationToRejection() {
    let notificationToRejection = document.getElementById('notificationToRejection');
    notificationToRejection.style.display = "block";

    setInterval(function () {
        notificationToRejection.style.display = "none";
    }, 3000);
}

// notifying both parties to select a map 
function notificationToSelectingMap() {
    let notificationToSelectingMap = document.getElementById('notificationToSelectingMap');
    notificationToSelectingMap.style.display = "block";

    setInterval(function () {
        notificationToSelectingMap.style.display = "none";
    }, 3000);
}

var waitingForRemoteResponse = false;
var waitingForPedalResponse = false;
var wantToPedalWithSomeoneElse = false;
var resumeSinglePlayerVideoTime = 0;
var resumeSinglePlayerBikeTime = 0;
var resumeSinglePlayerRaceProgress = 0;

// response to an invitation when player is in single player mode 
function responseToRemoteComp() {
    let responseToRemoteComp = document.getElementById('responseToRemoteComp');
    document.getElementById('comp name').innerHTML = "Amy"; // maybe pass in the actual friendsobject
    responseToRemoteComp.style.display = "block";

    waitingForRemoteResponse = true;
    resumed = -1;

    if (currentScreen == 'singlePlayer') {
        // pausing the video and storing time so the user can return to their original game play if reject invitation 
        resumeSinglePlayerVideoTime = document.getElementById('bikeVideo0').currentTime;
        resumeSinglePlayerBikeTime = Date.now();
        resumeSinglePlayerRaceProgress = document.getElementById('bikeProgress0');
        rejectPedals = true;
        document.getElementById('bikeVideo0').pause();
    }
}

// the fake data used for friends list for now, not used anymore 
// var friendsObject1 = {
//     name: "Steven",
//     active: true,
//     image: "url(images/peddler/Steven.jpg)"
// }

// var friendsObject2 = {
//     name: "Amy",
//     active: true,
//     image: "url(images/peddler/Amy.jpg)"
// }

// var friendsObject3 = {
//     name: "Daniel",
//     active: false,
//     image: "url(images/peddler/Daniel.jpg)"
// }

// var friendsObject4 = {
//     name: "Sarah",
//     active: true,
//     image: "url(images/peddler/Sarah.jpg)"
// }

// var friendsObject5 = {
//     name: "Tom",
//     active: false,
//     image: "url(images/peddler/Tom.jpg)"
// }

// var friendsObject6 = {
//     name: "Annie",
//     active: true,
//     image: "url(images/peddler/Annie.jpg)"
// }

// var friendsArray = [friendsObject1, friendsObject2, friendsObject3, friendsObject4, friendsObject5, friendsObject6];

// moving the friends list left or right, not used anymore 
function moveFriendsArrayLeft() {
    friendsArray.splice(0, 0, friendsArray[friendsArray.length - 1]);
    friendsArray.splice(friendsArray.length - 1, 1);
    friendsDisplay();
}

function moveFriendsArrayRight() {
    friendsArray.splice(friendsArray.length, 0, friendsArray[0]);
    friendsArray.splice(0, 1);
    friendsDisplay();
}

// displaying the friend list, not used anymore  
function friendsDisplay() {

    for (var count = 0; count <= 3; count++) {
        if (friendsArray[count].active) {
            document.getElementById("butFriendOnline" + count).className = "statusOnline";
            document.getElementById("butFriendOffline" + count).style.visibility = "hidden";
        }
        else {
            document.getElementById("butFriendOnline" + count).className = "statusOffline";
            document.getElementById("butFriendOffline" + count).style.visibility = "visible";
        }
        document.getElementById("butFriend" + count).style.background = friendsArray[count].image;
        document.getElementById("butFriend" + count).style.backgroundSize = "17vh 14vh";
        document.getElementById("name" + count).innerHTML = friendsArray[count].name;
    }

}

var selectingMap = false;
var mapSelectedForComp;
var rejectingCall = false;
let startCall = null;

// to obtain all messages coming from the iframe 
window.addEventListener('message', (e)=>{
    console.log("here")
    let iframe = document.getElementById("iframeID");
    let iframeWindow = document.getElementById("iframeWindow");
    document.getElementById('waitForPedal').style.display = "none";

    // Add a check for the origin
    if(e.data=="show_jajaja"){
        // get call notification
        if (currentScreen == "vidSelect") {
            iframe.classList.add("menuNotif")
        }
        else {
            iframe.classList.add("mapNotif")
        }
        iframe.classList.remove("hidden")
        //let selectVideoDiv = document.getElementById("vidSelect");
        //selectVideoDiv.style.left = "60%";
        rejectingCall = true; 
        startCall = setTimeout(function() {	
            iframeWindow.classList.add("camera")
            iframe.classList.remove("menuNotif")
            iframe.classList.remove("mapNotif")
            document.getElementById('accepter').innerHTML = "Connecting your call..."
            rejectingCall = false;	
            console.log("selecting map now!")
            // exitFromMap()
            remote_socket.emit('responded yes', USER_ID);
        }, 7000)
        console.log("showing the iframe");
    }else if(e.data=="hide_jajaja"){
        iframe.classList.add("hidden")
        iframeWindow.classList.remove("camera")
        if (startCall) {
           clearTimeout( startCall);
            startCall = null;
        }
        let selectVideoDiv = document.getElementById("vidSelect");
        selectVideoDiv.style.left = "50%";
        console.log("hiding the iframe");
    }
    else if (e.data == "takePlayerBackToMapSelection") {
        console.log(1)
        exitFromMap()
    }
    else{
        console.log("Bad input from iFrame")
        return
    }
}, false);

$(document).ready(function () {
    // centerArrTrackPoints(arrTracks);
    // friendsDisplay();
    document.getElementById('iframeID').children[0].src = `${PATH_TO_IFRAME}/video-call/call.html?id=${USER_ID}`
    // randomize();
    setScreen("vidSelect");
    getTrackForNextPage();
    // document.getElementById('myCanvas').style.display = "none"

    // responses to different socket signals 
    local_socket.emit('peddler start', { chatroom: 'peddler' });
    local_socket.emit('waiting for id', { chatroom: 'face recog' });
    // iframe_socket.emit('popupLogin', {userID: USER_ID});

    // when opponent said no to comp mode 
    remote_socket.on('rejection to invite', function () {
        console.log("responded no");
        notificationToRejection();
        document.getElementById("animatedCalling").style.animationPlayState = "paused";
        calling = false;
    })

    // tentatively hard coded for each response of user, will set up dynamically when database is set up
    // not used anymore 
    // remote_socket.on('display response screen Steven', function () {
    //     console.log("displaying response screen now ");
    //     responseToRemoteComp();
    // })

    // when one player exits the game 
    remote_socket.on('display notification player exit', function () {
        notificationToOnePlayerQuit();
        setScreen("singlePlayer");
        startOfComp = false;
    })

    remote_socket.on('selecting map', function () {
        selectingMap = true;
        // document.getElementById("animatedCalling").style.animationPlayState = "paused";
        notificationToSelectingMap();
        console.log("displaying nofirifcation to select map")
    })

    remote_socket.on('changing map', function () {
        selectingMap = true;
        exitFromMap();
        console.log(2)
        // document.getElementById("animatedCalling").style.animationPlayState = "paused";
        notificationToSelectingMap();
        console.log("displaying nofirifcation to select map")
    })

    remote_socket.on('remote comp map selected', function (mapName) {
        selectingMap = false;
        mapSelectedForComp = mapName;
        setScreenRemote();
        startOfComp = true;
    })

    // when gotten a signal of opponent pedalling 
    remote_socket.on('output from remote', function (data) {
        // console.log("Output from remote that has gone through remote server");

        if (startOfSingle) {
            if (currentScreen != 'competitive') {
                setScreenRemote();
                startOfComp = true;
            }
        }

        if (startOfComp && !player4Done) {
            ifPeddle("player" + '4');
            incrementActiveIdCounters('r');
        }

        video4PercentageComplete = data.progress;

    })

    remote_socket.on('progress from remote 1', function (progress) {
        video4PercentageComplete = progress;
    })

    // the signal from an actual peddler 
    local_socket.on('peddler turned 2', function (msg) {
        console.log('msg ' + msg);
        console.log('msg.id ' + msg.id);
        console.log('msg.0 ' + msg[Object.keys(msg)[0]]);
        console.log('msg.1 ' + msg[Object.keys(msg)[1]]);
        incrementActiveIdCounters(msg.id);
        if (!startOfSingle) {
            startOfSingle = true;
        }
        noOfActivePeddlers = activeIds.length;
        console.log("# active peddlers" + noOfActivePeddlers);
 
        // checks if msg is first video, is doing something to first video  
        if (gameMode == "singlePlayer") {
            ifPeddle("player0");
        } 
        
        else {
            if (countForRemote == 1) {
                countForRemote = 0;
            }
            else {
                let playerIdIndex = checkIfInArray('p', activeIds) + 1;
                if (startOfComp) {
                    ifPeddle("player" + '3');
                    let socketObject = {
                        input: user,
                        track: videoSelected,
                        progress: video3PercentageComplete
                    }
                    remote_socket.emit('input from local', socketObject);
                    sentPercentage = video3PercentageComplete;
                }
                else {
                    ifPeddle("player" + playerIdIndex.toString());
                }
                countForRemote++;
            }
        }
       
    });

    local_socket.on('redirect', function (destination) {
        window.location.href = destination;
    });

    local_socket.on('person detected', function (msg) {
        USER_ID = msg.id;
        document.getElementById("userId").innerText = USER_ID;
    });

    document.addEventListener("keydown", async function(event){ // adding listener to listen to key presses to reject calls	
        // console.log(event)	
    })

    let calling = false;

    $(document).keypress(function (event) {
        if ('q'.indexOf(String.fromCharCode(event.which)) !== -1) {
            // for responding to a remote comp mode invitation 
            if (rejectingCall) {	
                let iframeWindow = document.getElementById("iframeWindow")
                iframeWindow.contentWindow.postMessage("Hi","*") 
                rejectingCall = false;	
            }	
            else if (waitingForRemoteResponse) {
                waitingForRemoteResponse = false;
                rejectPedals = false;
                document.getElementById("responseToRemoteComp").style.display = "none";
                resumedTime0 = Date.now();
                resumed = 1;
                remote_socket.emit('responded yes');
            }
            else if (selectingMap) {
                let obj = {
                    mapName: trackOfCurrentPage[0].vname,
                    userID: USER_ID
                }
                remote_socket.emit('map selection button', obj);
                selectingMap = false;
            }
            else if (startOfComp)  {
                remote_socket.emit('change map', USER_ID);
                // remote_socket.emit('one user has exit the remote competition');
            }
            else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
                if (waitingForPedalResponse) {
                    // document.getElementById('iframeID').children[0].src = `${PATH_TO_IFRAME}/video-call/call.html?id=${USER_ID}`
                    // document.getElementById('promptForPedal').style.display = "none";
                    // document.getElementById('waitForPedal').style.display = "block";
                    waitingForPedalResponse = false;
                    wantToPedalWithSomeoneElse = true;
                }
                else {
                    console.log(3)
                    exitFromMap();
                }
            }
            else {
                document.getElementById("but0").click();
            }

        } else if ('w'.indexOf(String.fromCharCode(event.which)) !== -1) {
            if (rejectingCall) {	
                let iframeWindow = document.getElementById("iframeWindow")
                iframeWindow.contentWindow.postMessage("Hi","*") 	
                rejectingCall = false;
            }	
            else if (selectingMap) {
                remote_socket.emit('map selection button', trackOfCurrentPage[1].vname);
                selectingMap = false;
            }
            else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
                console.log(4)
                exitFromMap();
            }
            else {
                if (startOfComp) {
                    remote_socket.emit('one user has exit the remote competition');
                }
                document.getElementById("but1").click();
            }
      

        } else if ('e'.indexOf(String.fromCharCode(event.which)) !== -1) {
            // for responding to a remote comp mode invitation 
            if (rejectingCall) {	
                let iframeWindow = document.getElementById("iframeWindow")
                iframeWindow.contentWindow.postMessage("Hi","*")
                rejectingCall = false; 	
            }	
            else if (waitingForRemoteResponse) {
                waitingForRemoteResponse = false;
                rejectPedals = false;
                document.getElementById("responseToRemoteComp").style.display = "none";
                resumedTime0 = Date.now();
                resumed = 1;
                remote_socket.emit('responded no');
            }
            else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
                console.log(5);
                exitFromMap();
            }
            else if (selectingMap) {
                remote_socket.emit('map selection button', trackOfCurrentPage[2].vname);
                selectingMap = false;
            }
            else {
                if (startOfComp) {
                    remote_socket.emit('one user has exit the remote competition');
                }
                document.getElementById("but2").click();
            }
    
        } else if ('a'.indexOf(String.fromCharCode(event.which)) !== -1) {

            if (rejectingCall) {	
                let iframeWindow = document.getElementById("iframeWindow")
                iframeWindow.contentWindow.postMessage("Hi","*") 
                rejectingCall = false;	
            }	
            else if (selectingMap) {
                remote_socket.emit('map selection button', trackOfCurrentPage[3].vname);
                selectingMap = false;
            }
            else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
                console.log(6);
                exitFromMap();
            }
            else {
                if (startOfComp) {
                    remote_socket.emit('one user has exit the remote competition');
                }
                document.getElementById("but3").click();
            }
         

        } else if ('s'.indexOf(String.fromCharCode(event.which)) !== -1) {

            if (rejectingCall) {	
                let iframeWindow = document.getElementById("iframeWindow")
                iframeWindow.contentWindow.postMessage("Hi","*")
                rejectingCall = false; 	
            }	
            else if (selectingMap) {
                remote_socket.emit('map selection button', trackOfCurrentPage[4].vname);
                selectingMap = false;
            }
            else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
                console.log(7);
                exitFromMap();
            }
            else {
                if (startOfComp) {
                    remote_socket.emit('one user has exit the remote competition');
                }
                document.getElementById("but4").click();
            }
        

        } else if ('d'.indexOf(String.fromCharCode(event.which)) !== -1) {

            if (rejectingCall) {	
                let iframeWindow = document.getElementById("iframeWindow")
                iframeWindow.contentWindow.postMessage("Hi","*") 
                rejectingCall = false;	
            }	
            else if (startOfComp) {
                remote_socket.emit('one user has exit the remote competition');
            }
            else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
                console.log(8);
                exitFromMap();
            }
            else {
                document.getElementById("but5").click();
            }

        } else if ('r'.indexOf(String.fromCharCode(event.which)) !== -1) {
           
            responseToRemoteComp();

        } 

        // "[]" are used for scrolling through the friends list, not used anymore 
        else if ('['.indexOf(String.fromCharCode(event.which)) !== -1) {
            if (!calling) {
                moveFriendsArrayLeft();
            }
        } else if (']'.indexOf(String.fromCharCode(event.which)) !== -1) {
            if (!calling) {
                moveFriendsArrayRight();
            }
        }

        // "-" is used for pressing the friends button, not used anymore 
        else if ('-'.indexOf(String.fromCharCode(event.which)) !== -1) {
            let iframeWindow = document.getElementById("iframeWindow")
            iframeWindow.contentWindow.postMessage("Hi","*") 
            // if (friendsArray[1].active) {
            //     document.getElementById("animatedCalling").style.animationPlayState = "running";
            //     calling = true;
            //     remote_socket.emit('friend button pressed', friendsArray[1]);
            //     setInterval(function () {
            //         document.getElementById("animatedCalling").style.animationPlayState = "paused";
            //         calling = false;
            //     }, 20000);
            // }
        }

        else if ('m'.indexOf(String.fromCharCode(event.which)) !== -1) {
            // remote_socket.emit('map selection button', trackOfCurrentPage[0].vname);
            compPlayerWin.style.display = "block";
                compRemotePlayerWin.style.display = "none";
        }

        else if ('n'.indexOf(String.fromCharCode(event.which)) !== -1) {
            let temp = {
                input: "01",
                track: ""
            }
            remote_socket.emit('input from local', temp);
        }

        else if ('b'.indexOf(String.fromCharCode(event.which)) !== -1) {
            document.getElementById("compRemotePlayerWin").style.display="block";
        }

        else if ('012'.indexOf(String.fromCharCode(event.which)) !== -1) {
            if (String.fromCharCode(event.which) === '0') {
                navPath = '/nav'
            } else if (String.fromCharCode(event.which) === '1') {
                navPath = '/peddler'
            } else if (String.fromCharCode(event.which) === '2') {
                navPath = '/ds'
            }

            function navigate() {
                window.location.href = navPath;
            }
            setTimeout(navigate, 1000);

        }
    });

});

function startOrEndVid(key) {

    if (currentScreen == "vidSelect") {
        // On menu
        if (key == 'q' || key == 'w' || key == 'e' || key == 'a' || key == 's') {
            recordTime('vidStart', 'player0');
        }

        // Send pedal count every 5s and set vidStartTime
        if (gameMode == "singlePlayer") {
            intervalNumPedals0 = 0;
            //setInterval(function () { recordPedalInterval("player0", intervalNumPedals0); intervalNumPedals0 = 0 }, 1000);
            vidStartTime0 = Date.now();
        } else if (gameMode == "competitive") {
            intervalNumPedals1 = 0;
            intervalNumPedals2 = 0;
            intervalNumPedals3 = 0;

            //setInterval(function () { recordPedalInterval("player1", intervalNumPedals1); intervalNumPedals1 = 0 }, 1000);
            //setInterval(function () { recordPedalInterval("player2", intervalNumPedals2); intervalNumPedals2 = 0 }, 1000);
            //setInterval(function () { recordPedalInterval("player3", intervalNumPedals3); intervalNumPedals3 = 0 }, 1000);
        }

    }

    else if (currentScreen == "singlePlayer" || currentScreen == "competitive") {
        // On video
        if (key == 'q' || key == 'w' || key == 'e' || key == 'a' || key == 's' || key == 'd') {
            recordTime('quitVid', 'player0');
            window.location.reload();
            // exitFromMap();
        }
    }
}

function exitFromMap() {
    console.log("exit from map")
    clearInterval(intervalFunc);	
    // randomize();
    setScreen("vidSelect");
    getTrackForNextPage();
    
    // let iframe = document.getElementById("iframeID");
    // iframe.style.display = "none";

}

/* Speed changing variables and functions */
// Speed changer variables
let peddlerVideo0 = document.getElementById('bikeVideo0');
let peddlerVideo1 = document.getElementById('bikeVideo1');
let peddlerVideo2 = document.getElementById('bikeVideo2');
let peddlerVideo3 = document.getElementById('bikeVideo3');
let peddlerVideo4 = document.getElementById('bikeVideo4');

let pedalCount0 = 0;
let pedalCount1 = 0;
let pedalCount2 = 0;
let pedalCount3 = 0;
let pedalCount4 = 0;

let speedIndex0 = 0;
let speedIndex1 = 0;
let speedIndex2 = 0;
let speedIndex3 = 0;
let speedIndex4 = 0;

let vidSpeed0 = 0;
let vidSpeed1 = 0;
let vidSpeed2 = 0;
let vidSpeed3 = 0;
let vidSpeed4 = 0;

let updateInterval = 3000;
let activeInterval = 150000;
let currentPedalTime0 = 0;
let currentPedalTime1 = 0;
let currentPedalTime2 = 0;
let currentPedalTime3 = 0;
let currentPedalTime4 = 0;

let lastPedalTime0;
let lastPedalTime1;
let lastPedalTime2;
let lastPedalTime3;
let lastPedalTime4;

let speed = [0, 1, 1.3, 1.6, 1.95, 2.3, 2.5];//var speed = [0, 1, 1.3, 1.55, 1.75, 1.9, 2];

function ifPeddle(player) {
    if (rejectPedals == true || currentScreen == "vidSelect" || currentScreen == "modeSelect") {
        return;
    }
    setSpeed();

    setTimeout(function () { updateRecentPedal(player) }, updateInterval);

    if (player == "player0") {
        // Single player
        recordPeddle(player);
        //recordSpeed(player, vidSpeed0);
        pedalCount0++;
        totalPeddleCount0++;
        intervalNumPedals0++;

        // Increase vidSpeed here
        lastPedalTime0 = currentPedalTime0;
        currentPedalTime0 = Date.now(); // in milliseconds

        let pedalTimeInterval = currentPedalTime0 - lastPedalTime0;

        if (pedalTimeInterval >= 0 && pedalTimeInterval < 75) {
            speedIndex0 = 6;
        } else if (pedalTimeInterval >= 75 && pedalTimeInterval < 250) {
            speedIndex0 = 5;
        } else if (pedalTimeInterval >= 250 && pedalTimeInterval < 500) {
            speedIndex0 = 4;
        } else if (pedalTimeInterval >= 500 && pedalTimeInterval < 1000) {
            speedIndex0 = 3;
        } else if (pedalTimeInterval >= 1000 && pedalTimeInterval < 1500) {
            speedIndex0 = 2;
        } else {
            speedIndex0 = 1;
        }

        vidSpeed0 = speed[speedIndex0];
        peddlerVideo0.playbackRate = vidSpeed0;
        //recordSpeed(player, vidSpeed0); // This should be removed either way?
        if (reachedEnd0 == 0) {
            peddlerVideo0.play();
        }


    } else if (player == "player1") {
        // Competitive player 1
        recordPeddle(player);
        //recordSpeed(player, vidSpeed1);
        pedalCount1++;
        totalPeddleCount1++;
        intervalNumPedals1++;

        // Increase vidSpeed here
        lastPedalTime1 = currentPedalTime1;
        currentPedalTime1 = Date.now(); // in milliseconds

        let pedalTimeInterval = currentPedalTime1 - lastPedalTime1;

        if (pedalTimeInterval >= 0 && pedalTimeInterval < 75) {
            speedIndex1 = 6;
        } else if (pedalTimeInterval >= 75 && pedalTimeInterval < 250) {
            speedIndex1 = 5;
        } else if (pedalTimeInterval >= 250 && pedalTimeInterval < 500) {
            speedIndex1 = 4;
        } else if (pedalTimeInterval >= 500 && pedalTimeInterval < 1000) {
            speedIndex1 = 3;
        } else if (pedalTimeInterval >= 1000 && pedalTimeInterval < 1500) {
            speedIndex1 = 2;
        } else {
            speedIndex1 = 1;
        }

        vidSpeed1 = speed[speedIndex1];
        // console.log("vidspeed1 " + vidSpeed1);
        peddlerVideo1.playbackRate = vidSpeed1;
        //recordSpeed(player, vidSpeed1); //Remove

        if (reachedEnd1 == 0) {
            peddlerVideo1.play();
        }

    } else if (player == "player2") {
        // Competitive player 2
        recordPeddle(player);
        //recordSpeed(player, vidSpeed2);
        pedalCount2++;
        totalPeddleCount2++;
        intervalNumPedals2++;

        // Increase vidSpeed here
        lastPedalTime2 = currentPedalTime2;
        currentPedalTime2 = Date.now(); // in milliseconds

        let pedalTimeInterval = currentPedalTime2 - lastPedalTime2;

        if (pedalTimeInterval >= 0 && pedalTimeInterval < 75) {
            speedIndex2 = 6;
        } else if (pedalTimeInterval >= 75 && pedalTimeInterval < 250) {
            speedIndex2 = 5;
        } else if (pedalTimeInterval >= 250 && pedalTimeInterval < 500) {
            speedIndex2 = 4;
        } else if (pedalTimeInterval >= 500 && pedalTimeInterval < 1000) {
            speedIndex2 = 3;
        } else if (pedalTimeInterval >= 1000 && pedalTimeInterval < 1500) {
            speedIndex2 = 2;
        } else {
            speedIndex2 = 1;
        }

        vidSpeed2 = speed[speedIndex2];
        // console.log("vidspeed2 " + vidSpeed2);
        peddlerVideo2.playbackRate = vidSpeed2;
        //recordSpeed(player, vidSpeed2); //Remove

        if (reachedEnd2 == 0) {
            peddlerVideo2.play();
        }
    }

    else if (player == "player3") {
        // Competitive player 3
        recordPeddle(player);
        //recordSpeed(player, vidSpeed3);
        pedalCount3++;
        totalPeddleCount3++;
        intervalNumPedals3++;

        // Increase vidSpeed here
        lastPedalTime3 = currentPedalTime3;
        currentPedalTime3 = Date.now(); // in milliseconds

        let pedalTimeInterval = currentPedalTime3 - lastPedalTime3;

        if (pedalTimeInterval >= 0 && pedalTimeInterval < 75) {
            speedIndex3 = 6;
        } else if (pedalTimeInterval >= 75 && pedalTimeInterval < 250) {
            speedIndex3 = 5;
        } else if (pedalTimeInterval >= 250 && pedalTimeInterval < 500) {
            speedIndex3 = 4;
        } else if (pedalTimeInterval >= 500 && pedalTimeInterval < 1000) {
            speedIndex3 = 3;
        } else if (pedalTimeInterval >= 1000 && pedalTimeInterval < 1500) {
            speedIndex3 = 2;
        } else {
            speedIndex3 = 1;
        }

        vidSpeed3 = speed[speedIndex3];
        peddlerVideo3.playbackRate = vidSpeed3;
        //recordSpeed(player, vidSpeed3); //Remove

        if (reachedEnd3 == 0) {
            peddlerVideo3.play();
        }
    }
    else if (player == "player4") {
        // Competitive player 4
        recordPeddle(player);
        //recordSpeed(player, vidSpeed4);
        pedalCount4++;
        totalPeddleCount4++;
        intervalNumPedals4++;

        // Increase vidSpeed here
        lastPedalTime4 = currentPedalTime4;
        currentPedalTime4 = Date.now(); // in milliseconds

        let pedalTimeInterval = currentPedalTime4 - lastPedalTime4;

        if (pedalTimeInterval >= 0 && pedalTimeInterval < 75) {
            speedIndex4 = 6;
        } else if (pedalTimeInterval >= 75 && pedalTimeInterval < 250) {
            speedIndex4 = 5;
        } else if (pedalTimeInterval >= 250 && pedalTimeInterval < 500) {
            speedIndex4 = 4;
        } else if (pedalTimeInterval >= 500 && pedalTimeInterval < 1000) {
            speedIndex4 = 3;
        } else if (pedalTimeInterval >= 1000 && pedalTimeInterval < 1500) {
            speedIndex4 = 2;
        } else {
            speedIndex4 = 1;
        }

        vidSpeed4 = speed[speedIndex4];
        // console.log("vidspeed4 " + vidSpeed4);
        peddlerVideo4.playbackRate = vidSpeed4;
        //recordSpeed(player, vidSpeed4); //Remove

        if (reachedEnd4 == 0) {
            peddlerVideo4.play();
        }
    }
}

function setSpeed() {
    if (videoPlaying == "Gondola in Venice") {
        // speed = [0, 1, 2, 3, 5, 10, 50];
        speed = [0, 1, 1.3, 1.5, 2, 2.5, 3];
    } else if (videoPlaying == "French Alps") {
        speed = [0, 1, 1.4, 1.75, 2.15, 2.5, 3];
    } else if (videoPlaying == "Central Park") {
        speed = [0, 1, 1.3, 1.8, 2.2, 2.65, 3];
    } else if (videoPlaying == "Rocky Desert") {
        speed = [0, 0.8, 1, 1.3, 1.7, 2, 2.5];
    } else if (videoPlaying == "Country Road") {
        speed = [0, 1, 1.5, 2, 2.5, 3, 3.5];
    } else if (videoPlaying == "Forest Trail") {
        speed = [0, 1, 1.5, 1.8, 2.5, 3, 3.5];
    } else if (videoPlaying == "Lakeshore County") {
        speed = [0, 0.8, 1.2, 1.6, 2.1, 2.6, 3.2];
    } else if (videoPlaying == "Alpine Village") {
        speed = [0, 0.8, 1.1, 1.35, 1.65, 2.25, 3.0];
    } else if (videoPlaying == "Evergreen Trail") {
        speed = [0, 1.5, 2, 2.5, 3, 3.5, 4];
    } else if (videoPlaying == "Bustling City") {
        speed = [0, 1, 1.3, 1.6, 1.95, 2.3, 2.5];
    } else if (videoPlaying == "Evening City") {
        speed = [0, 1, 2, 2.5, 3, 3.5, 4];
    } else if (videoPlaying == "Winter Dogsled") {
        speed = [0, 1, 1.4, 1.75, 2.05, 2.3, 2.5];
    } else if (videoPlaying == "Eiffel Tower") {
        speed = [0, 1, 2, 2.5, 3, 3.5, 4];
    } else if (videoPlaying == "Outside the Louvre") {
        speed = [0, 1, 2, 2.5, 3, 3.5, 4];
    } else if (videoPlaying == "Beach Walk") {
        speed = [0, 1, 2, 2.5, 3, 3.5, 4];
    } else if (videoPlaying == "Egyptian Pyramids") {
        speed = [0, 1, 1.5, 2, 2.5, 3, 4];
    } else if (videoPlaying == "Majestic Mountains") {
        speed = [0, 0.8, 1.1, 1.5, 2, 2.6, 3];
    } else if (videoPlaying == "Italian Riviera") {
        speed = [0, 1, 2, 2.5, 3, 3.5, 4];
    } else if (videoPlaying == "Hawaiian Resort") {
        speed = [0, 1, 1.3, 1.6, 1.95, 2.3, 2.5];
    } else if (videoPlaying == "Cherry Blossoms") {
        speed = [0, 1, 1.5, 2, 2.6, 3.5, 4];
    } else if (videoPlaying == "Big Ben") {
        speed = [0, 1, 1.3, 1.6, 1.9, 2.5, 3.5];
    } else if (videoPlaying == "Bike Race") {
        speed = [0, 0.7, 0.9, 1.2, 1.5, 1.8];
    } else {
        speed = [0, 1, 2, 2.5, 3, 3.5, 4];
    }
}

function updateRecentPedal(player) {
    if (player == "player0") {
        if (pedalCount0 > 0) {
            pedalCount0 = pedalCount0 - 1;
        }

        if (pedalCount0 == 0) {
            speedIndex0 = 0;
            vidSpeed0 = speed[speedIndex0];
            peddlerVideo0.playbackRate = vidSpeed0;
            //recordSpeed(player, vidSpeed0);
        }
    } else if (player == "player1") {
        if (pedalCount1 > 0) {
            pedalCount1 = pedalCount1 - 1;
        }

        if (pedalCount1 == 0) {
            speedIndex1 = 0;
            vidSpeed1 = speed[speedIndex1];
            peddlerVideo1.playbackRate = vidSpeed1;
            //recordSpeed(player, vidSpeed1);
        }
    } else if (player == "player2") {
        if (pedalCount2 > 0) {
            pedalCount2 = pedalCount2 - 1;
        }

        if (pedalCount2 == 0) {
            speedIndex2 = 0;
            vidSpeed2 = speed[speedIndex2];
            peddlerVideo2.playbackRate = vidSpeed2;
            //recordSpeed(player, vidSpeed2);
        }
    }
    else if (player == "player3") {
        if (pedalCount3 > 0) {
            pedalCount3 = pedalCount3 - 1;
        }

        if (pedalCount3 == 0) {
            speedIndex3 = 0;
            vidSpeed3 = speed[speedIndex3];
            peddlerVideo3.playbackRate = vidSpeed3;
            //recordSpeed(player, vidSpeed3);
        }
    }
    else if (player == "player4") {
        if (pedalCount4 > 0) {
            pedalCount4 = pedalCount4 - 1;
        }

        if (pedalCount4 == 0) {
            speedIndex4 = 0;
            vidSpeed4 = speed[speedIndex4];
            peddlerVideo4.playbackRate = vidSpeed4;
            //recordSpeed(player, vidSpeed4);
        }
    }
}

function decrementActiveIdCounters(playerId) {
    let playerIdIndex = checkIfInArray(playerId, activeIds);
    let removedIndex;
    let finish1 = document.getElementById("finish1");
    let finish2 = document.getElementById("finish2");

    // Decrease counter
    if (reachedEnd1 == 0 && reachedEnd2 == 0) {
        activeIds[playerIdIndex].activeCount = activeIds[playerIdIndex].activeCount - 1;
    }


    if (activeIds[playerIdIndex].activeCount <= 0) {
        // No longer active, remove from ids && activeIdCounters
        activeIds.splice(playerIdIndex, 1);
        removedIndex = playerIdIndex;
        ids.splice(ids.indexOf(playerId), 1)
        console.log("Removed one activeId");
    }

    noOfActivePeddlers = activeIds.length;
    if (noOfActivePeddlers < 2 && currentScreen == "competitive") {
        if (noOfActivePeddlers == 1) {
            // If there is at least one active peddler, set it to that progress
            let activeIndex = getActiveIndex(removedIndex);
            let activePlayerTime = document.getElementById('bikeVideo' + activeIndex.toString()).currentTime;
            let vid0 = document.getElementById('bikeVideo0');
            vid0.currentTime = activePlayerTime;
        }
        setScreen("singlePlayer");
    }

    function getActiveIndex(removedIndex) {
        // Removed index can be 0 or 1 representing player 1 or 2 respectively
        // Want the other index
        if (removedIndex == 0) {
            return 2;
        } else if (removedIndex == 1) {
            return 1;
        }
    }
}

var countForRemote = 0;

function speedchanger() {
    peddlerVideo0 = document.getElementById('bikeVideo0');
    peddlerVideo1 = document.getElementById('bikeVideo1');
    peddlerVideo2 = document.getElementById('bikeVideo2');
    peddlerVideo3 = document.getElementById('bikeVideo3');
    peddlerVideo4 = document.getElementById('bikeVideo4');

    // Sets speeds according to video

    $(document).keypress(function (event) {
        // console.log(String.fromCharCode(event.which));
        try {
            if ('p'.indexOf(String.fromCharCode(event.which)) !== -1) {
                incrementActiveIdCounters('p');
              
                if (!startOfSingle) {
                    startOfSingle = true;
                }
                remote_socket.emit('first input from local', 'p');
     
            } else if ('o'.indexOf(String.fromCharCode(event.which)) !== -1) {
                incrementActiveIdCounters('o');
            }

            noOfActivePeddlers = activeIds.length;

            // p is simulated for peddler
            if ('p'.indexOf(String.fromCharCode(event.which)) !== -1) {
                if (gameMode == "singlePlayer") {
                    ifPeddle("player0");

                } else {
                    if (countForRemote == 1) {
                        countForRemote = 0;
                    }
                    else {
                        let playerIdIndex = checkIfInArray('p', activeIds) + 1;
                        if (startOfComp) {
                            ifPeddle("player" + '3');
                            let socketObject = {
                                input: user,
                                track: videoSelected,
                                progress: video3PercentageComplete,
                                userID: USER_ID
                            }
                            remote_socket.emit('input from local', socketObject);
                            sentPercentage = video3PercentageComplete;
                        }
                        else {
                            ifPeddle("player" + playerIdIndex.toString());
                        }
                        countForRemote++;
                    }
                }
            } else if ('o'.indexOf(String.fromCharCode(event.which)) !== -1) {
                if (gameMode == "singlePlayer") {
                    ifPeddle("player0");
                } else if (gameMode == 'competitive') {
                    let playerIdIndex = checkIfInArray('o', activeIds) + 1;
                    ifPeddle("player" + playerIdIndex.toString());
                }
            }
        } catch (err) {
            console.log(err)
        }

    });

}

/* Function for incrementing activeIdcounters */
function incrementActiveIdCounters(playerId) {
    let playerIdIndex = checkIfInArray(playerId, activeIds);
    let vid0 = document.getElementById('bikeVideo0');
    let vid1 = document.getElementById('bikeVideo1');
    let vid2 = document.getElementById('bikeVideo2');
    let vid3 = document.getElementById('bikeVideo3');
    let vid4 = document.getElementById('bikeVideo4');

    // ids does not include playerId
    if (playerIdIndex == -1) {
        // Add id to ids and activeIds
        ids.push(playerId);

        let temp = Object.create(idObject);
        temp.id = playerId;
        temp.activeCount = 0;
        activeIds.push(temp);

        // Increment active peddlers
        noOfActivePeddlers = activeIds.length;
        if (noOfActivePeddlers >= 2 && (currentScreen == "singlePlayer" || currentScreen == "competitive") && !startOfComp) {
            setScreen("competitive");
        }

        // update playerIdIndex
        playerIdIndex = checkIfInArray(playerId, activeIds);
    }

    if (playerIdIndex != -1) {
        // ids includes current playerId
        playerIdIndex = activeIds.findIndex(getIndex);

        // Increment counter
        activeIds[playerIdIndex].activeCount = activeIds[playerIdIndex].activeCount + 1;
    }

    function getIndex(value) {
        return (value.id == playerId);
    }

    // Decrement active id counter after activeInterval

    setTimeout(function () { decrementActiveIdCounters(playerId) }, activeInterval);

}

/* Functions for idObjects */
// Check if id is in array of idObjects, if so, return index; else, return -1
function checkIfInArray(id, array) {
    let length = array.length;
    for (let i = 0; i < array.length; i++) {
        if (array[i].id == id) {
            return i;
        }
    }
    return -1;
}

/* Functions for data recording */
function getElapsedTime(currentTime, player) {
    if (vidStartTime0 == 0 && vidStartTime1 == 0 && vidStartTime2 == 0) {
        return 0;
    } else {
        if (player == "player0") {
            let vid = document.getElementById('bikeVideo0');
            return vid.currentTime;
        } else if (player == "player1") {
            let vid = document.getElementById('bikeVideo1');
            return vid.currentTime;
        } else if (player == "player3") {
            let vid = document.getElementById('bikeVideo3');
            return vid.currentTime;
        } else if (player == "player4") {
            let vid = document.getElementById('bikeVideo4');
            return vid.currentTime;
        } else {
            // Player 2
            let vid = document.getElementById('bikeVideo2');
            return vid.currentTime;
        }
    }
}

function recordButtonPress(pressedKey) {
    // Create events
    const buttonPressEvent = Object.create(eventObject);
    buttonPressEvent.timestamp = Date.now();
    buttonPressEvent.typeOfInteraction = "buttonPress";
    buttonPressEvent.interaction = pressedKey;
    let player;
    if (gameMode == "singlePlayer") {
        player = "player0";
    } else {
        player = "player1";
    }
    buttonPressEvent.elapsedTime = getElapsedTime(Date.now(), player);

    // Log to eventList 
    eventList.push(buttonPressEvent);
}

function recordGameMode(gameMode) {
    // Create events
    const gameModeEvent = Object.create(eventObject);
    gameModeEvent.timestamp = Date.now();
    gameModeEvent.typeOfInteraction = "gameMode";
    gameModeEvent.interaction = gameMode;
    let player;
    if (gameMode == "singlePlayer") {
        player = "player0";
    } else {
        player = "player1";
    }
    gameModeEvent.elapsedTime = getElapsedTime(Date.now(), player);

    // Log to eventList 
    eventList.push(gameModeEvent);
}

function recordPeddle(player) {
    const peddleEvent = Object.create(eventObject);
    peddleEvent.timestamp = Date.now();
    peddleEvent.typeOfInteraction = player;
    peddleEvent.interaction = 'p';
    peddleEvent.elapsedTime = getElapsedTime(Date.now(), player);

    // Log to eventList array
    eventList.push(peddleEvent);
}

function recordTime(timeType, player) {
    const timeEvent = Object.create(eventObject);
    timeEvent.timestamp = Date.now();
    timeEvent.typeOfInteraction = timeType;
    timeEvent.interaction = Date.now();
    timeEvent.elapsedTime = getElapsedTime(Date.now(), player);

    // Log to eventList array
    eventList.push(timeEvent);
    if (timeType.includes("vidEnd") || timeType.includes("quitVid")){
        postData()
        eventList = [];
        rejectedVideos = [];
        numberOfPeddlesPerPlayer = [];
    }
}

function recordVideoName(vidName) {
    const videoEvent = Object.create(videoObject);
    videoEvent.timestamp = Date.now();
    videoEvent.videoName = vidName;
    // let player;
    // if (gameMode == "singlePlayer") {
    //     player = "player0";
    // } else {
    //     player = "player1";
    // }
    // videoEvent.elapsedTime = getElapsedTime(Date.now(), player);

    // Log to eventList array
    videoPlayed = videoEvent;
    // videoPlayed.push(videoEvent);
}

function recordRejectedVideos(rejectedVidNamesArray) {
    if (rejectedVidNamesArray instanceof Array) {
        for (i = 0; i < rejectedVidNamesArray.length; i++) {
            const rejectedVidEvent = Object.create(rejectedObject);
            rejectedVidEvent.timestamp = Date.now();
            rejectedVidEvent.videoName = rejectedVidNamesArray[i];


            // Log to eventList array
            rejectedVideos.push(rejectedVidEvent);
        }
    }
}

// function recordSpeed(player, speed) {
//     const speedEvent = Object.create(eventObject);
//     speedEvent.timestamp = Date.now();
//     speedEvent.typeOfInteraction = 'speed of ' + player;
//     speedEvent.interaction = speed;
//     speedEvent.elapsedTime = getElapsedTime(Date.now(), player);

//     // Log to eventList array
//     eventList.push(speedEvent);
// }

// function recordPedalInterval(player, intervalNumPedals) {
//     const pedalIntervalEvent = Object.create(eventObject);
//     pedalIntervalEvent.timestamp = Date.now();
//     pedalIntervalEvent.typeOfInteraction = player + ' pedalsIn1Second';
//     pedalIntervalEvent.interaction = intervalNumPedals;
//     pedalIntervalEvent.elapsedTime = getElapsedTime(Date.now(), player);

//     // Log to eventList array
//     eventList.push(pedalIntervalEvent);
// }

// function recordTotalPeddle() {
//     const numberOfPeddlesPerPlayerObject0 = Object.create(numberOfPeddlesPerPlayerObject);
//     numberOfPeddlesPerPlayerObject0.numberOfPeddles = totalPeddleCount0;
//     numberOfPeddlesPerPlayerObject0.playerID = "playerID";
// }

function postData(url, data) {


    let session = {
        userID: USER_ID,
        unitID: global.UNIT_ID,
        datetime: Date.now(),
        start_time: start_time,
        end_time: Date.now(),
        eventList: eventList,
        rejectedVideos: rejectedVideos,
        videoPlayed: videoPlayed,
        numberOfPeddlesPerPlayer: numberOfPeddlesPerPlayer,

        //numberOfPeddlesPerPlayer: number of peddles per game for the two diff users 
        //gameMode: entire singlePlayer, entire comp, mix of both 

        //eventlist addition: maybe add a 
        //typeofINteracotin = "new player joined"
        //interaction = playerId

        //playerID's, just send empty array for now 
    }

    // Default options are marked with *p
    makeRequest(session)
        .then(response => {
            response.json()
            console.log(response);

        }).catch((err) => {
            console.log(err);
            let arrays = localStorage.getItem('videoJSON');
            if (arrays) {
                arrays = JSON.parse(arrays);
                console.log(arrays)
                arrays.push((session));
                localStorage.setItem('videoJSON', JSON.stringify(arrays));
            } else {
                const newArrays = [];

                newArrays.push(session);
                localStorage.setItem('videoJSON', JSON.stringify(newArrays));
            }
        }); // parses JSON response into native Javascript objects
}

async function makeRequest(session) {
    const res = await fetch(BACKEND_URL + 'api/physical-centivizer/', {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, cors, *same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
            'Content-Type': 'application/json',
            // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrer: 'no-referrer', // no-referrer, *client
        body: JSON.stringify(session), // body data type must match "Content-Type" header
    })
    return res;
}

window.onload = ((e) => {
    let arrays = localStorage.getItem('videoJSON');
    if (arrays) {
        arrays = JSON.parse(arrays);
        arrays.forEach((element, index) => {
            // makeRequest(element).then(res => {
            //     console.log(res)
            //     if (res.status === 201) {
            //         console.log('success')
            //         thearrays = JSON.parse(localStorage.getItem('videoJSON'));
            //         thearrays.forEach((theelement, i) => {
            //             console.log(theelement, element)
            //             if (JSON.stringify(theelement) == JSON.stringify(element)) {
            //                 thearrays.splice(i, 1);
            //                 localStorage.setItem('videoJSON', JSON.stringify(thearrays));
            //             }
            //         });


            //     }
            // }).catch(err => {
            //     console.log(err);
            // });

        });
    }

});
